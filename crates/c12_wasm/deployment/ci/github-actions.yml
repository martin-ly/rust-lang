# GitHub Actions CI/CD Pipeline for Wasm Project
#
# 功能：
#   - 代码检查（格式化、Linting、测试）
#   - 构建 Wasm 二进制
#   - 优化和压缩
#   - 构建 Docker 镜像
#   - 推送到镜像仓库
#   - 部署到 Kubernetes
#
# 触发条件：
#   - Push to main/develop
#   - Pull Request
#   - Tag (v*.*.*)
#
# 文件位置：.github/workflows/wasm-ci-cd.yml

name: Wasm CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_VERSION: 1.90
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/wasm-app

jobs:
  # ==========================================================================
  # Job 1: 代码检查和测试
  # ==========================================================================
  check:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          override: true
          components: rustfmt, clippy

      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --verbose

      - name: Run security audit
        run: |
          cargo install cargo-audit
          cargo audit

  # ==========================================================================
  # Job 2: 构建 Wasm 二进制
  # ==========================================================================
  build-wasm:
    name: Build WebAssembly
    runs-on: ubuntu-latest
    needs: check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          override: true
          target: wasm32-wasi

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-wasm-${{ hashFiles('**/Cargo.lock') }}

      - name: Build Wasm
        run: |
          cargo build --target wasm32-wasi --release
          ls -lh target/wasm32-wasi/release/*.wasm

      - name: Install wasm-opt
        run: |
          wget https://github.com/WebAssembly/binaryen/releases/download/version_116/binaryen-version_116-x86_64-linux.tar.gz
          tar -xzf binaryen-version_116-x86_64-linux.tar.gz
          sudo cp binaryen-version_116/bin/wasm-opt /usr/local/bin/

      - name: Optimize Wasm
        run: |
          wasm-opt -Oz --strip-debug --strip-producers \
            target/wasm32-wasi/release/*.wasm \
            -o app-optimized.wasm
          echo "Original size:"
          ls -lh target/wasm32-wasi/release/*.wasm
          echo "Optimized size:"
          ls -lh app-optimized.wasm

      - name: Upload Wasm artifact
        uses: actions/upload-artifact@v3
        with:
          name: wasm-binary
          path: app-optimized.wasm
          retention-days: 7

  # ==========================================================================
  # Job 3: 构建 Docker 镜像（多平台）
  # ==========================================================================
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build-wasm
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Wasm artifact
        uses: actions/download-artifact@v3
        with:
          name: wasm-binary

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/docker/Dockerfile.wasm
          platforms: linux/amd64,linux/arm64,wasi/wasm
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ==========================================================================
  # Job 4: 部署到 Staging 环境
  # ==========================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging-wasm-api.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to Kubernetes
        run: |
          export KUBECONFIG=kubeconfig
          kubectl set image deployment/wasm-microservice \
            wasm-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop \
            -n wasm-staging
          kubectl rollout status deployment/wasm-microservice -n wasm-staging

      - name: Run smoke tests
        run: |
          # 等待部署完成
          sleep 30
          # 简单的健康检查
          curl -f https://staging-wasm-api.example.com/health || exit 1

      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Staging deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ==========================================================================
  # Job 5: 部署到 Production 环境
  # ==========================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-docker
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://wasm-api.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to Kubernetes
        run: |
          export KUBECONFIG=kubeconfig

          # 更新镜像
          kubectl set image deployment/wasm-microservice \
            wasm-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }} \
            -n wasm-prod

          # 等待滚动更新完成
          kubectl rollout status deployment/wasm-microservice -n wasm-prod --timeout=5m

          # 验证部署
          kubectl get pods -n wasm-prod -l app=wasm-microservice

      - name: Run smoke tests
        run: |
          # 健康检查
          curl -f https://wasm-api.example.com/health || exit 1

          # API 测试
          curl -f https://wasm-api.example.com/api/info || exit 1

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.version.outputs.VERSION }}
          body: |
            ## Changes in this Release
            - Deployed to production
            - Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false

      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment ${{ job.status }} - Version ${{ steps.version.outputs.VERSION }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ==========================================================================
  # Job 6: 性能基准测试
  # ==========================================================================
  benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: build-wasm
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          override: true

      - name: Run benchmarks
        run: |
          cargo bench --bench '*' -- --output-format bencher | tee benchmark_results.txt

      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'cargo'
          output-file-path: benchmark_results.txt
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

# ============================================================================
# 使用说明：
#
# 1. 将此文件放置在：.github/workflows/wasm-ci-cd.yml
#
# 2. 配置 GitHub Secrets：
#    - KUBECONFIG_STAGING: Staging K8s 集群配置（base64 编码）
#    - KUBECONFIG_PRODUCTION: Production K8s 集群配置（base64 编码）
#    - SLACK_WEBHOOK: Slack 通知 webhook URL
#
# 3. 触发流程：
#    - Push 到 develop → 部署到 staging
#    - 创建 tag (v1.0.0) → 部署到 production
#    - 创建 PR → 运行测试和检查
#
# 4. 查看结果：
#    - Actions 标签页查看流程执行情况
#    - Packages 查看发布的镜像
#    - Releases 查看发布的版本
#
# ============================================================================

