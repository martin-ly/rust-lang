# Kubernetes 部署配置 - Wasm 微服务完整示例
#
# 本文件包含：
# - RuntimeClass
# - Namespace
# - ConfigMap
# - Secret
# - Deployment
# - Service
# - HorizontalPodAutoscaler
# - Ingress
# - NetworkPolicy
# - ServiceMonitor (Prometheus)
#
# 应用方法：
# kubectl apply -f wasm-deployment.yaml

---
# 1. RuntimeClass - 定义 WasmEdge 运行时
apiVersion: node.k8s.io/v1
kind: RuntimeClass
metadata:
  name: wasmedge
handler: wasmedge  # 对应 containerd 配置中的运行时

---
# 2. Namespace - 创建专用命名空间
apiVersion: v1
kind: Namespace
metadata:
  name: wasm-prod
  labels:
    name: wasm-prod
    runtime: wasmedge
    environment: production

---
# 3. ConfigMap - 应用配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: wasm-microservice-config
  namespace: wasm-prod
data:
  # 应用配置
  LOG_LEVEL: "info"
  MAX_CONNECTIONS: "1000"
  ENABLE_METRICS: "true"

  # 应用配置文件（可选）
  app-config.toml: |
    [server]
    host = "0.0.0.0"
    port = 8080
    workers = 4

    [logging]
    level = "info"
    format = "json"

    [features]
    metrics = true
    health_check = true

---
# 4. Secret - 敏感信息
apiVersion: v1
kind: Secret
metadata:
  name: wasm-microservice-secrets
  namespace: wasm-prod
type: Opaque
stringData:
  # API 密钥（示例）
  API_KEY: "your-secret-api-key-here"
  # 数据库连接字符串（如果需要）
  # DATABASE_URL: "postgres://user:pass@db:5432/mydb"

---
# 5. Deployment - 主应用部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wasm-microservice
  namespace: wasm-prod
  labels:
    app: wasm-microservice
    version: v1
    runtime: wasmedge
spec:
  # 副本数
  replicas: 3

  # 选择器
  selector:
    matchLabels:
      app: wasm-microservice
      version: v1

  # 滚动更新策略
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1

  # Pod 模板
  template:
    metadata:
      labels:
        app: wasm-microservice
        version: v1
        runtime: wasmedge
      annotations:
        # Prometheus 抓取配置
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"

    spec:
      # 使用 WasmEdge 运行时
      runtimeClassName: wasmedge

      # 容器定义
      containers:
      - name: wasm-app
        # 镜像（需要构建并推送到镜像仓库）
        image: your-registry/wasm-microservice:v1.0.0
        imagePullPolicy: Always

        # 端口
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP

        # 环境变量（从 ConfigMap）
        envFrom:
        - configMapRef:
            name: wasm-microservice-config

        # 环境变量（从 Secret）
        env:
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: wasm-microservice-secrets
              key: API_KEY
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP

        # 资源限制（Wasm 容器资源占用小）
        resources:
          requests:
            memory: "16Mi"
            cpu: "50m"
          limits:
            memory: "64Mi"
            cpu: "200m"

        # 健康检查
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 3

        # 就绪探针
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 3
          periodSeconds: 5
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 3

        # 启动探针
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 0
          periodSeconds: 2
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 10

        # 挂载卷
        volumeMounts:
        - name: config
          mountPath: /etc/app
          readOnly: true

      # 卷定义
      volumes:
      - name: config
        configMap:
          name: wasm-microservice-config
          items:
          - key: app-config.toml
            path: config.toml

      # 安全上下文
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault

      # 节点选择器（可选）
      nodeSelector:
        wasm.capable: "true"

      # 容忍度（可选）
      tolerations:
      - key: "workload"
        operator: "Equal"
        value: "wasm"
        effect: "NoSchedule"

      # 拓扑分布约束
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: wasm-microservice

      # DNS 配置
      dnsPolicy: ClusterFirst

      # 重启策略
      restartPolicy: Always

      # 终止宽限期
      terminationGracePeriodSeconds: 30

---
# 6. Service - ClusterIP 服务
apiVersion: v1
kind: Service
metadata:
  name: wasm-microservice
  namespace: wasm-prod
  labels:
    app: wasm-microservice
spec:
  type: ClusterIP
  selector:
    app: wasm-microservice
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP

  # 会话亲和性
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800  # 3 hours

---
# 7. HorizontalPodAutoscaler - 自动扩缩容
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: wasm-microservice-hpa
  namespace: wasm-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: wasm-microservice

  minReplicas: 3
  maxReplicas: 30  # Wasm 容器轻量，可以大规模扩展

  metrics:
  # CPU 指标
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70

  # 内存指标
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

  # 扩缩容行为
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 15
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 5
        periodSeconds: 15
      selectPolicy: Max

---
# 8. Ingress - HTTP 入口
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: wasm-microservice-ingress
  namespace: wasm-prod
  annotations:
    # NGINX Ingress Controller 配置
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"

    # 速率限制
    nginx.ingress.kubernetes.io/limit-rps: "100"

    # 超时配置（Wasm 响应快，可以设置较短）
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "5"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "10"

    # CORS 配置
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"

    # 缓存配置
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
spec:
  ingressClassName: nginx

  rules:
  - host: wasm-api.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: wasm-microservice
            port:
              number: 80

  # TLS 配置
  tls:
  - hosts:
    - wasm-api.example.com
    secretName: wasm-api-tls  # 需要创建此 Secret

---
# 9. NetworkPolicy - 网络策略
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: wasm-microservice-netpol
  namespace: wasm-prod
spec:
  podSelector:
    matchLabels:
      app: wasm-microservice

  policyTypes:
  - Ingress
  - Egress

  # 入站规则
  ingress:
  # 允许来自 Ingress Controller 的流量
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080

  # 允许来自 Prometheus 的流量
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
      podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 9090

  # 出站规则
  egress:
  # 允许 DNS 查询
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53

  # 允许访问外部 API（示例）
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 443

---
# 10. ServiceMonitor - Prometheus 监控（需要 Prometheus Operator）
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: wasm-microservice-monitor
  namespace: wasm-prod
  labels:
    app: wasm-microservice
    prometheus: kube-prometheus
spec:
  selector:
    matchLabels:
      app: wasm-microservice

  endpoints:
  - port: metrics
    interval: 15s
    path: /metrics
    scheme: http

    # 指标重新标记
    relabelings:
    - sourceLabels: [__meta_kubernetes_pod_name]
      targetLabel: pod
    - sourceLabels: [__meta_kubernetes_namespace]
      targetLabel: namespace

