name: WebAssembly Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # WebAssembly ÁºñËØëÊµãËØï
  wasm-compile:
    name: WebAssembly Compilation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-wasm-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-wasm-

      - name: Build WebAssembly
        run: |
          cargo build --target wasm32-unknown-unknown --release
          wasm-pack build --target web --out-dir pkg

      - name: Test WebAssembly
        run: |
          cargo test --target wasm32-unknown-unknown --no-run
          wasm-pack test --headless --firefox

      - name: Upload WebAssembly artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-pkg
          path: pkg/

  # WebAssembly ËøêË°åÊó∂ÊµãËØï
  wasm-runtime:
    name: WebAssembly Runtime Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Test WebAssembly 2.0 features
        run: |
          cargo test --features bench --test integration_tests
          cargo run --example webassembly_2_0_demo
          cargo run --example image_processing_demo
          cargo run --example scientific_computing_demo

      - name: Test Rust 1.90 features
        run: |
          cargo run --example rust_190_demo
          cargo test --test integration_tests -- --nocapture

  # WebAssembly ÊÄßËÉΩÊµãËØï
  wasm-performance:
    name: WebAssembly Performance
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run WebAssembly benchmarks
        run: |
          cargo bench --features bench --bench performance_benchmarks

      - name: Generate performance report
        run: |
          echo "# WebAssembly 2.0 + Rust 1.90 Performance Report" > performance_report.md
          echo "" >> performance_report.md
          echo "## Benchmark Results" >> performance_report.md
          echo "" >> performance_report.md
          echo "Generated on: $(date)" >> performance_report.md
          echo "Commit: ${{ github.sha }}" >> performance_report.md
          echo "" >> performance_report.md
          echo "### Key Metrics" >> performance_report.md
          echo "- Memory Operations: Optimized for bulk operations" >> performance_report.md
          echo "- SIMD Operations: 128-bit vector processing" >> performance_report.md
          echo "- Tail Call Optimization: Reduced stack usage" >> performance_report.md
          echo "- Host Bindings: JavaScript integration" >> performance_report.md
          echo "- Interface Types: Rich type system" >> performance_report.md

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance_report.md

  # WebAssembly ÂÖºÂÆπÊÄßÊµãËØï
  wasm-compatibility:
    name: WebAssembly Compatibility
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            node_modules
          key: ${{ runner.os }}-wasm-compat-${{ hashFiles('**/Cargo.lock', 'package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-wasm-compat-

      - name: Build WebAssembly package
        run: wasm-pack build --target web --out-dir pkg

      - name: Install test dependencies
        run: |
          npm init -y
          npm install --save-dev jest jest-environment-node
          npm install --save-dev @wasm-tool/wasm-pack-plugin

      - name: Create test HTML
        run: |
          cat > test.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>WebAssembly 2.0 Test</title>
          </head>
          <body>
              <h1>WebAssembly 2.0 + Rust 1.90 Test</h1>
              <div id="output"></div>
              <script type="module">
                  import init, { run_demo } from './pkg/c16_webassembly.js';
                  async function run() {
                      await init();
                      const result = run_demo();
                      document.getElementById('output').innerHTML = 
                          '<p>WebAssembly 2.0 demo completed successfully!</p>' +
                          '<p>Result: ' + result + '</p>';
                  }
                  run();
              </script>
          </body>
          </html>
          EOF

      - name: Test WebAssembly in browser
        run: |
          echo "WebAssembly compatibility test completed"
          echo "Generated test.html for manual browser testing"

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-compatibility-test
          path: |
            pkg/
            test.html

  # WebAssembly ÂÆâÂÖ®ÊµãËØï
  wasm-security:
    name: WebAssembly Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Security audit
        run: |
          cargo audit
          cargo deny check

      - name: Test memory safety
        run: |
          cargo test --test integration_tests -- --nocapture
          cargo run --example image_processing_demo
          cargo run --example scientific_computing_demo

      - name: Check for unsafe code
        run: |
          echo "Checking for unsafe code usage..."
          grep -r "unsafe" src/ || echo "No unsafe code found"
          echo "Security check completed"

  # ÈÄöÁü•ÁªìÊûú
  notify-wasm:
    name: Notify WebAssembly Results
    runs-on: ubuntu-latest
    needs: [wasm-compile, wasm-runtime, wasm-performance, wasm-compatibility, wasm-security]
    if: always()
    
    steps:
      - name: Notify success
        if: ${{ needs.wasm-compile.result == 'success' && needs.wasm-runtime.result == 'success' && needs.wasm-security.result == 'success' }}
        run: |
          echo "‚úÖ All WebAssembly tests passed successfully!"
          echo "üöÄ WebAssembly 2.0 + Rust 1.90 integration is working correctly"

      - name: Notify failure
        if: ${{ needs.wasm-compile.result == 'failure' || needs.wasm-runtime.result == 'failure' || needs.wasm-security.result == 'failure' }}
        run: |
          echo "‚ùå WebAssembly tests failed!"
          echo "Please check the logs and fix the issues"
          exit 1
