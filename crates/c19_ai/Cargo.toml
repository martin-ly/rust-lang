[package]
name = "c19_ai"
version = "0.2.0"
edition = "2024"
resolver = "3"
description = "AI and Machine Learning with Rust 1.89 - 人工智能与机器学习"
authors = ["Rust AI Team"]
license = "MIT"
repository = "https://github.com/rust-lang/c19_ai"
keywords = ["ai", "machine-learning", "deep-learning", "neural-networks", "nlp", "computer-vision", "llm", "transformers", "rust-189"]
categories = ["science", "machine-learning", "algorithms"]
rust-version = "1.89"

[dependencies]
# 核心依赖 - 更新到最新版本
serde = { version = "1.0", features = ["derive"] }
tokio = { version = "1.45", features = ["full"] }
rand = "0.8"
anyhow = "1.0"
thiserror = "1.0"
uuid = { version = "1.0", features = ["v4", "serde"] }

# 数学和数值计算 - 最新版本
ndarray = { version = "0.16", features = ["serde"] }
nalgebra = "0.33"
num-traits = "0.2"
num-complex = "0.4"
approx = "0.5"

# 机器学习核心库 - 最新版本
linfa = { version = "0.7", optional = true }
smartcore = { version = "0.4", optional = true }
candle-core = { version = "0.4", optional = true }
candle-nn = { version = "0.4", optional = true }
candle-transformers = { version = "0.4", optional = true }
candle-datasets = { version = "0.4", optional = true }

# 深度学习框架 - 最新版本
tch = { version = "0.14", optional = true }
dfdx = { version = "0.13", optional = true }

# 自然语言处理 - 最新版本
tokenizers = { version = "0.20", optional = true }
rust-bert = { version = "0.22", optional = true }
llm-chain = { version = "0.12", optional = true }
llm-chain-openai = { version = "0.12", optional = true }
llm-chain-llama = { version = "0.12", optional = true }
llm-chain-local = { version = "0.12", optional = true }

# 计算机视觉 - 最新版本
opencv = { version = "0.90", optional = true }
image = { version = "0.25", optional = true }
imageproc = { version = "0.25", optional = true }

# 数据处理 - 最新版本
polars = { version = "0.50", features = ["lazy", "temporal", "strings", "dtype-categorical", "dtype-struct"], optional = true }
datafusion = { version = "42.0", optional = true }
arrow = { version = "55.0", optional = true }

# 向量数据库和搜索 - 最新版本
qdrant-client = { version = "1.8", optional = true }
tantivy = { version = "0.25", optional = true }
hnsw_rs = { version = "0.2", optional = true }

# 网络和API - 最新版本
reqwest = { version = "0.12", features = ["json", "stream", "multipart"] }
async-openai = { version = "0.20", optional = true }
openai = { version = "1.0", optional = true }

# 序列化和配置 - 最新版本
toml = "0.8"
yaml-rust = "0.4"
bincode = "1.3"
ron = "0.8"
serde_json = "1.0"

# 日志和监控 - 最新版本
tracing = "0.1"
tracing-subscriber = "0.3"
metrics = { version = "0.23", optional = true }
metrics-exporter-prometheus = { version = "0.13", optional = true }

# 并发和性能 - 最新版本
rayon = "1.10"
crossbeam = "0.8"
dashmap = "6.0"

# 测试和基准测试 - 最新版本
criterion = { version = "0.5", features = ["html_reports"] }
proptest = "1.4"

# 新增：AI 特定依赖
# 大语言模型支持
llama-cpp-2 = { version = "0.1", optional = true }
# 图神经网络
petgraph = { version = "0.6", optional = true }
# 时间序列
chrono = { version = "0.4", features = ["serde"], optional = true }
# 配置管理
config = "0.14"
# 错误处理增强
miette = "7.0"

[dev-dependencies]
tempfile = "3.8"
proptest = "1.4"

[features]
# 将默认特性限制为纯 CPU 传统 ML，避免 workspace 级别的冲突
default = ["basic-ai"]
# 基础 AI 功能
basic-ai = ["dep:linfa", "dep:smartcore"]
# 深度学习框架（均为可选且非默认启用）
candle = ["dep:candle-core", "dep:candle-nn", "dep:candle-transformers", "dep:candle-datasets"]
tch = ["dep:tch"]
dfdx = ["dep:dfdx"]
# GPU 支持
gpu = ["candle", "tch"]
# 大语言模型
llm = ["dep:llm-chain", "dep:llm-chain-openai", "dep:llm-chain-llama", "dep:llm-chain-local", "dep:llama-cpp-2"]
# OpenAI 集成
openai = ["dep:async-openai", "dep:openai", "dep:llm-chain-openai"]
# 计算机视觉
vision = ["dep:opencv", "dep:image", "dep:imageproc"]
# 自然语言处理
nlp = ["dep:rust-bert", "dep:tokenizers", "dep:llm-chain"]
# 数据处理
data = ["dep:polars", "dep:datafusion", "dep:arrow"]
# 向量搜索
search = ["dep:qdrant-client", "dep:tantivy", "dep:hnsw_rs"]
# 模型管理与管道控制
management = []
# 强化学习
reinforcement = ["dep:tch"]
# 图神经网络
gnn = ["dep:petgraph"]
# 时间序列
timeseries = ["dep:chrono"]
# 监控和指标
monitoring = ["dep:metrics", "dep:metrics-exporter-prometheus"]
# 完整功能（注意：这会拉入多种后端及其系统依赖）
full = ["candle", "tch", "llm", "vision", "nlp", "data", "search", "reinforcement", "gnn", "timeseries", "monitoring"]

[[bench]]
name = "neural_network_bench"
harness = false

[[bench]]
name = "ml_algorithms_bench"
harness = false

[lib]
name = "c19_ai"
path = "src/lib.rs"

[[example]]
name = "basic_ml"
path = "examples/basic_ml.rs"

[[example]]
name = "deep_learning"
path = "examples/deep_learning.rs"
required-features = ["candle", "tch", "dfdx"]

[[example]]
name = "nlp_pipeline"
path = "examples/nlp_pipeline.rs"
required-features = ["nlp"]

[[example]]
name = "computer_vision"
path = "examples/computer_vision.rs"
required-features = ["vision"]

[[example]]
name = "llm_chat"
path = "examples/llm_chat.rs"
required-features = ["llm"]

[[example]]
name = "vector_search"
path = "examples/vector_search.rs"
required-features = ["search", "data"]

[[example]]
name = "diffusion_model"
path = "examples/diffusion_model.rs"
required-features = ["candle"]

[[example]]
name = "reinforcement_learning"
path = "examples/reinforcement_learning.rs"
required-features = ["reinforcement"]

[[example]]
name = "graph_neural_network"
path = "examples/graph_neural_network.rs"
required-features = ["gnn"]

[[example]]
name = "time_series_forecasting"
path = "examples/time_series_forecasting.rs"
required-features = ["timeseries"]