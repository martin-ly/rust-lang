version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: c19_ai_postgres
    environment:
      POSTGRES_DB: c19_ai
      POSTGRES_USER: c19_ai
      POSTGRES_PASSWORD: c19_ai_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - c19_ai_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U c19_ai -d c19_ai"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: c19_ai_redis
    command: redis-server --appendonly yes --requirepass c19_ai_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - c19_ai_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO对象存储
  minio:
    image: minio/minio:latest
    container_name: c19_ai_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: c19_ai_minio
      MINIO_ROOT_PASSWORD: c19_ai_minio_password
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - c19_ai_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # c19_ai应用
  c19_ai:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: c19_ai_app
    environment:
      # 数据库配置
      DATABASE_URL: postgresql://c19_ai:c19_ai_password@postgres:5432/c19_ai
      DATABASE_TYPE: postgresql
      
      # Redis配置
      REDIS_URL: redis://:c19_ai_redis_password@redis:6379
      
      # 存储配置
      STORAGE_TYPE: s3
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: c19_ai_minio
      S3_SECRET_KEY: c19_ai_minio_password
      S3_BUCKET: c19-ai-storage
      S3_REGION: us-east-1
      
      # 应用配置
      RUST_LOG: info
      RUST_BACKTRACE: 1
      C19_AI_CONFIG_PATH: /app/config
      C19_AI_DATA_PATH: /app/data
      C19_AI_LOG_PATH: /app/logs
      
      # API配置
      API_HOST: 0.0.0.0
      API_PORT: 8080
      API_WORKERS: 4
      
      # 认证配置
      JWT_SECRET: c19_ai_jwt_secret_key_change_in_production
      JWT_EXPIRY: 3600
      
      # 缓存配置
      CACHE_TYPE: redis
      CACHE_TTL: 3600
      CACHE_MAX_SIZE: 10000
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - app_config:/app/config
    ports:
      - "8080:8080"
      - "8081:8081"
    networks:
      - c19_ai_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: c19_ai_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - c19_ai_network
    depends_on:
      - c19_ai
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: c19_ai_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - c19_ai_network

  # Grafana仪表板
  grafana:
    image: grafana/grafana:latest
    container_name: c19_ai_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: c19_ai_grafana_password
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - c19_ai_network
    depends_on:
      - prometheus

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  app_data:
    driver: local
  app_logs:
    driver: local
  app_config:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  c19_ai_network:
    driver: bridge