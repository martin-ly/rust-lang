name: Rust 1.90 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 每周一运行完整测试
    - cron: '0 0 * * 1'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # 代码质量检查
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-version: ['1.90.0', 'stable', 'beta', 'nightly']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust-version }}
        components: rustfmt, clippy
        override: true
        
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust-version }}-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Check formatting
      run: cargo fmt --package c10_networks -- --check
      
    - name: Run Clippy
      run: cargo clippy --package c10_networks -- -D warnings
      continue-on-error: ${{ matrix.rust-version == 'nightly' }}

  # 测试套件
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust-version: ['1.90.0', 'stable']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust-version }}
        override: true
        
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust-version }}-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Run tests
      run: cargo test --package c10_networks --lib --verbose
      
    - name: Run doc tests
      run: cargo test --package c10_networks --doc
      
    - name: Run example tests
      run: cargo test --package c10_networks --examples

  # Rust 1.90 特性验证
  rust-190-features:
    name: Rust 1.90 Features Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust 1.90
      uses: actions-rs/toolchain@v1
      with:
        toolchain: '1.90.0'
        override: true
        
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-1.90.0-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Run Rust 1.90 features demo
      run: cargo run --package c10_networks --example rust_190_async_features_demo
      
    - name: Run performance benchmark
      run: cargo run --package c10_networks --example rust_190_performance_benchmark

  # 性能基准测试
  benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust 1.90
      uses: actions-rs/toolchain@v1
      with:
        toolchain: '1.90.0'
        override: true
        
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-1.90.0-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install criterion
      run: cargo install cargo-criterion
        
    - name: Run benchmarks
      run: cargo bench --package c10_networks
      
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: target/criterion/

  # 网络功能测试
  network-tests:
    name: Network Functionality Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust 1.90
      uses: actions-rs/toolchain@v1
      with:
        toolchain: '1.90.0'
        override: true
        
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-1.90.0-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Run DNS tests
      run: cargo run --package c10_networks --example dns_lookup -- example.com
      
    - name: Run WebSocket tests
      run: cargo run --package c10_networks --example websocket_demo
      
    - name: Run TCP tests
      run: timeout 10s cargo run --package c10_networks --example tcp_echo_server || true

  # 文档生成和部署
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust 1.90
      uses: actions-rs/toolchain@v1
      with:
        toolchain: '1.90.0'
        override: true
        
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-1.90.0-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Generate documentation
      run: cargo doc --package c10_networks --no-deps --document-private-items
      
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc

  # 安全扫描
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust 1.90
      uses: actions-rs/toolchain@v1
      with:
        toolchain: '1.90.0'
        override: true
        
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Run security audit
      run: cargo audit
      
    - name: Install cargo-geiger
      run: cargo install cargo-geiger
      
    - name: Run unsafe code scan
      run: cargo geiger

  # 发布准备
  release-prep:
    name: Release Preparation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [quality, test, rust-190-features, benchmark, network-tests, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust 1.90
      uses: actions-rs/toolchain@v1
      with:
        toolchain: '1.90.0'
        override: true
        
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-1.90.0-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build release
      run: cargo build --package c10_networks --release
      
    - name: Run final validation
      run: |
        cargo test --package c10_networks --release
        cargo run --package c10_networks --example rust_190_async_features_demo --release
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts
        path: target/release/

  # 通知
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [quality, test, rust-190-features, benchmark, network-tests, security, docs, release-prep]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.quality.result == 'success' && needs.test.result == 'success' && needs.rust-190-features.result == 'success' }}
      run: |
        echo "✅ All CI/CD pipeline jobs completed successfully!"
        echo "C10 Networks Rust 1.90 implementation is ready for production."
        
    - name: Notify failure
      if: ${{ needs.quality.result == 'failure' || needs.test.result == 'failure' || needs.rust-190-features.result == 'failure' }}
      run: |
        echo "❌ CI/CD pipeline failed. Please check the logs."
        exit 1
