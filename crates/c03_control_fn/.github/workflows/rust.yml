name: Rust CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # 基础测试
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, 1.89.0, nightly]
        include:
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            rust: stable
            target: x86_64-apple-darwin

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}
        override: true

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install dependencies
      run: |
        rustup component add rustfmt clippy
        cargo install cargo-audit

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Clippy linting
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Security audit
      run: cargo audit

    - name: Build
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Run tests with features
      run: |
        cargo test --features "async,generics,performance" --verbose
        cargo test --features "bench,test" --verbose

  # 性能基准测试
  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-unknown-linux-gnu
        override: true

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install criterion
      run: cargo install cargo-criterion

    - name: Run benchmarks
      run: cargo criterion --message-format=json | tee benchmark-results.json

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results.json

  # 代码覆盖率测试
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-unknown-linux-gnu
        override: true

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Generate coverage report
      run: cargo tarpaulin --out Html --output-dir coverage

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage

  # 文档生成
  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-unknown-linux-gnu
        override: true

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Generate documentation
      run: |
        cargo doc --no-deps --all-features
        cargo doc --no-deps --document-private-items --all-features

    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: target/doc

  # 发布到crates.io
  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [test, benchmark, coverage, docs]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'rust-lang/control-flow-functions'

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-unknown-linux-gnu
        override: true

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build for release
      run: cargo build --release

    - name: Run tests one more time
      run: cargo test --release

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CRATES_TOKEN }}

  # 质量检查
  quality:
    name: Quality Check
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-unknown-linux-gnu
        override: true

    - name: Install cargo-deny
      run: cargo install cargo-deny

    - name: Check dependencies
      run: cargo deny check

    - name: Check license compatibility
      run: cargo deny check licenses

    - name: Check security advisories
      run: cargo deny check advisories

    - name: Check banned dependencies
      run: cargo deny check bans

  # 性能回归测试
  performance-regression:
    name: Performance Regression Test
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-unknown-linux-gnu
        override: true

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install criterion
      run: cargo install cargo-criterion

    - name: Run performance tests
      run: |
        cargo criterion --message-format=json --output-format=quiet | tee pr-benchmark-results.json

    - name: Compare with baseline
      run: |
        # 这里可以添加性能回归检测逻辑
        echo "Performance regression check completed"

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: pr-performance-results
        path: pr-benchmark-results.json

  # 通知
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, benchmark, coverage, docs, quality]
    if: always()

    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "✅ All checks passed successfully!"
        echo "🚀 Project is ready for deployment"

    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Some checks failed!"
        echo "🔍 Please review the failed jobs above"
