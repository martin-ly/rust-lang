[package]
name = "c11_frameworks"
version = "0.1.0"
edition = "2024"
resolver = "3"
description = "Rust 框架与生态系统 - 2025年完整指南"
authors = ["Rust Framework Team"]
license = "MIT OR Apache-2.0"
repository = "https://github.com/rust-lang/frameworks"
keywords = ["rust", "frameworks", "web", "async", "ecosystem"]
categories = ["web-programming", "asynchronous"]

[dependencies]
# 错误处理
thiserror = { workspace = true }
anyhow = { workspace = true }

# 工作区内网络模块
c10_networks = { path = "../c10_networks", features = ["tls"] }
hyper = { workspace = true }
tokio-stream = { workspace = true }
async-stream = "0.3"
tokio-rustls = { workspace = true }
rustls = { workspace = true }
rustls-pemfile = { workspace = true }
rcgen = "0.12"
hyper-util = { workspace = true }
http-body-util = "0.1"
bytes = { workspace = true }

# 异步运行时
tokio = { workspace = true }
async-std = { version = "1.12", optional = true }

# Web框架
actix-web = { version = "4.11", optional = true }
axum = { workspace = true, optional = true }
rocket = { version = "0.5", optional = true }
warp = { version = "0.4", optional = true }

# 数据库与ORM
diesel = { version = "2.2", features = ["postgres"], optional = true }
sea-orm = { version = "0.12", optional = true, default-features = false, features = ["sqlx-postgres", "runtime-tokio-rustls"] }
# sqlx 直接依赖移除以规避 sqlite 冲突
dotenvy = "0.15"

# 序列化
serde = { workspace = true }
serde_json = { workspace = true }
bincode = { version = "1.3", optional = true }
rmp-serde = { version = "1.1", optional = true }

# 命令行工具
clap = { version = "4.5", features = ["derive"], optional = true }
structopt = { version = "0.3", optional = true }

# GUI框架
tauri = { version = "1.8", optional = true }
egui = { version = "0.24", optional = true }
iced = { version = "0.12", optional = true }

# 测试框架
criterion = { version = "0.5", optional = true }
mockall = { version = "0.13", optional = true }
proptest = { version = "1.4", optional = true }

# 日志
tracing = { version = "0.1", optional = true }
tracing-subscriber = { version = "0.3", optional = true }
env_logger = { version = "0.11", optional = true }

# 其他工具
uuid = { workspace = true }
chrono = { workspace = true }
reqwest = { workspace = true, optional = true }

# 安全相关
jsonwebtoken = { version = "9.3", optional = true }
argon2 = { version = "0.5", optional = true }
base64 = { version = "0.22", optional = true }
hmac = { version = "0.12", optional = true }
sha2 = { version = "0.10", optional = true }
aes-gcm = { version = "0.10", optional = true }

# 性能优化
memmap2 = { version = "0.9", optional = true }
rayon = { version = "1.10", optional = true }
dashmap = { version = "5.5", optional = true }
lru = { version = "0.12", optional = true }
crossbeam = { version = "0.8", optional = true }
parking_lot = { version = "0.12", optional = true }

# 监控和可观测性
opentelemetry = { version = "0.21", optional = true }
opentelemetry_sdk = { version = "0.21", optional = true }
opentelemetry-stdout = { version = "0.30", optional = true }
prometheus = { version = "0.13", optional = true }

# 异步和并发
futures = { version = "0.3", optional = true }
tokio-util = { version = "0.7", optional = true }

# 配置管理
toml = { version = "0.8", optional = true }

[features]
default = ["web", "database", "serialization", "cli", "config"]
web = ["actix-web", "axum", "warp"]
# 将默认 database 设为仅 diesel，避免 sqlx 冲突
database = ["diesel"]
# database-sqlx 特性保留占位（暂无直依赖）
database-sqlx = []
serialization = ["bincode", "rmp-serde"]
cli = ["clap", "structopt"]
gui = ["tauri", "egui", "iced"]
testing = ["criterion", "mockall", "proptest"]
http-client = ["reqwest"]
logging = ["tracing", "tracing-subscriber", "env_logger"]
config = ["toml"]
security = ["jsonwebtoken", "argon2", "base64", "hmac", "sha2", "aes-gcm"]
performance = ["memmap2", "rayon", "dashmap", "lru", "crossbeam", "parking_lot"]
monitoring = ["opentelemetry", "opentelemetry_sdk", "opentelemetry-stdout", "prometheus"]
async-patterns = ["futures", "tokio-util"]
serde = []
uuid = []
chrono = []

[dev-dependencies]
tokio-test = "0.4"
tempfile = "3.10"

[lib]
name = "c11_frameworks"
path = "src/lib.rs"

[[bin]]
name = "c11_frameworks"
path = "src/bin/main.rs"

[[example]]
name = "actix_web_example"
path = "examples/actix_web_example.rs"
required-features = ["actix-web"]

[[example]]
name = "axum_example"
path = "examples/axum_example.rs"
required-features = ["axum"]

[[example]]
name = "axum_acme_autoreload"
path = "examples/axum_acme_autoreload.rs"
required-features = ["axum"]

[[example]]
name = "diesel_example"
path = "examples/diesel_example.rs"
required-features = ["diesel"]

[[example]]
name = "cli_example"
path = "examples/cli_example.rs"
required-features = ["clap"]

[[example]]
name = "advanced_web_service"
path = "examples/advanced_web_service.rs"
required-features = ["axum", "serde", "uuid", "chrono"]

[[example]]
name = "microservice_architecture"
path = "examples/microservice_architecture.rs"
required-features = ["axum", "serde", "uuid", "chrono"]

[[example]]
name = "async_patterns"
path = "examples/async_patterns.rs"
required-features = ["tokio", "futures", "serde"]

[[example]]
name = "security_examples"
path = "examples/security_examples.rs"
required-features = ["axum", "serde", "uuid", "chrono", "jsonwebtoken", "argon2", "base64", "hmac", "sha2", "aes-gcm"]

[[example]]
name = "performance_optimization"
path = "examples/performance_optimization.rs"
required-features = ["tokio", "serde", "memmap2", "rayon", "dashmap", "lru", "crossbeam", "parking_lot"]

[[example]]
name = "monitoring_observability"
path = "examples/monitoring_observability.rs"
required-features = ["axum", "serde", "uuid", "chrono", "opentelemetry", "prometheus", "tracing"]

[[example]]
name = "database_best_practices"
path = "examples/database_best_practices.rs"
required-features = ["serde", "uuid", "chrono"]
