/*
1. 整数类型
    整数类型用于表示没有小数部分的数值。
    Rust 提供了多种整数类型，分为有符号和无符号两类。
    1.1 有符号整数
        i8: 8 位有符号整数，范围为 -128 到 127。
        i16: 16 位有符号整数，范围为 -32,768 到 32,767。
        i32: 32 位有符号整数，范围为 -2,147,483,648 到 2,147,483,647。
        i64: 64 位有符号整数，范围为 -9,223,372,036,854,775,808 到 9,223,372,036,854,775,807。
        i128: 128 位有符号整数，范围为 -170,141,183,460,684,697,6... 到 170,141,183,460,684,697,6...。
        isize: 根据平台的位数（32 位或 64 位）来决定大小的有符号整数。
    1.2 无符号整数
        u8: 8 位无符号整数，范围为 0 到 255。
        u16: 16 位无符号整数，范围为 0 到 65,535。
        u32: 32 位无符号整数，范围为 0 到 4,294,967,295。
        u64: 64 位无符号整数，范围为 0 到 18,446,744,073,709,551,615。
        u128: 128 位无符号整数，范围为 0 到 340,282,366,920,938,463,463,374,607,431,768,211,456。
        usize: 根据平台的位数（32 位或 64 位）来决定大小的无符号整数。
2. 注意事项
    2.1 溢出：在 Rust 的调试模式下，整数溢出会导致 panic，而在发布模式下，溢出会导致值环绕（wrap around）。
    2.2 类型转换：在进行不同类型之间的运算时，可能需要显式转换。
*/

#[allow(unused)]
pub fn interger_operation() {
    let a: i32 = 10; // 有符号 32 位整数
    let b: u32 = 20; // 无符号 32 位整数

    let sum = a + b as i32; // 需要将 b 转换为 i32
    println!("Sum: {}", sum); // 打印: Sum: 30
}
