# 所有权定义

## 元数据

- **概念ID**: 01.01
- **概念名称**: 所有权定义 (Ownership Definition)
- **理论层次**: 第二层：语言特征形式化层
- **相关概念**: 01.03 (所有权移动), 01.04 (借用), 01.05 (生命周期)
- **难度级别**: 基础

## 形式化定义

使用统一符号系统(RFUSS)的形式化定义：

```math
\text{Own}(x, v) \equiv (x \mapsto v) \in \Sigma \land \forall y \neq x. (y \mapsto v) \notin \Sigma
```

其中：

- $\text{Own}(x, v)$ 表示变量$x$拥有值$v$
- $\Sigma$ 表示当前内存状态
- $(x \mapsto v) \in \Sigma$ 表示在内存状态$\Sigma$中，$x$指向值$v$
- $\forall y \neq x. (y \mapsto v) \notin \Sigma$ 表示没有其他变量指向值$v$

## 代码映射

形式化表示与代码的对应关系：

| 形式化表示 | Rust代码 | 说明 |
|----------|---------|------|
| `Own(x, v)` | `let x = v;` | 变量x拥有值v |
| `Σ` | 程序的内存状态 | 包含所有变量绑定 |
| `(x ↦ v) ∈ Σ` | x是有效变量且持有v | 变量绑定在作用域内有效 |
| `∀y≠x. (y↦v) ∉ Σ` | 没有其他变量持有相同的值 | 值的唯一所有权 |

## 基础示例

最小化示例代码，展示所有权的核心概念：

```rust
fn main() {
    // 创建一个字符串值，s拥有该值
    // Own(s, "hello")
    let s = String::from("hello");
    
    // 此时只有s拥有该字符串值
    // ∀y≠s. (y↦"hello") ∉ Σ
    
    // 使用所拥有的值
    println!("字符串值: {}", s);
    
    // 当s离开作用域时，值被自动释放
    // 这里s离开作用域，Drop(s)被调用
} // <- s的作用域结束，字符串被释放
```

**解释**：

- `let s = String::from("hello")` 创建一个字符串并将所有权绑定到变量`s`
- 在这个作用域中，只有`s`拥有这个字符串值，这体现了所有权的唯一性
- 当`s`离开作用域时，编译器自动插入调用`Drop`的代码，释放字符串占用的内存

## 进阶示例

在实际场景中应用所有权概念：

```rust
struct Resource {
    data: String,
}

impl Resource {
    // 创建新资源，构造函数获得所有权
    fn new(data: String) -> Resource {
        // 参数data的所有权移动到结构体体字段
        Resource { data }
    }
    
    // 使用资源但不移动所有权
    fn display(&self) {
        println!("Resource data: {}", self.data);
    }
    
    // 消耗资源，获取其中的数据
    fn consume(self) -> String {
        // self的所有权被移动到函数中
        // 返回data，所有权移动给调用者
        self.data
    }
}

fn main() {
    // 创建字符串，s拥有它
    let s = String::from("valuable data");
    
    // 创建资源，所有权从s移动到resource.data
    let resource = Resource::new(s);
    
    // s不再拥有字符串值
    // println!("{}", s); // 错误：s的值已被移动
    
    // 使用资源而不移动所有权
    resource.display();
    
    // 消耗资源，获取数据的所有权
    let data = resource.consume();
    
    // resource不再可用
    // resource.display(); // 错误：resource的值已被移动
    
    // 现在data拥有字符串值
    println!("Reclaimed data: {}", data);
} // <- data离开作用域，字符串被释放
```

**解释**：

- `Resource::new`接收字符串的所有权并存储在结构体体中
- `display`方法通过引用使用资源，不移动所有权
- `consume`方法获取`self`的所有权，然后返回内部数据，所有权移动给调用者
- 整个过程中，字符串值始终只有一个所有者，所有者变更为：`s` → `resource.data` → `data`

## 边界情况

展示所有权概念的边界条件和特殊情况：

```rust
fn main() {
    // 情况1: Copy类型不遵循严格的所有权移动
    let x = 5; // 基本类型实现了Copy
    let y = x; // x的值被复制给y，而非移动
    
    // x和y都可以使用，因为i32实现了Copy
    println!("x = {}, y = {}", x, y);
    
    // 情况2: 引用不获取所有权，只是借用
    let s = String::from("hello");
    let len = calculate_length(&s); // 借用s，不获取所有权
    
    // s仍然拥有字符串值
    println!("字符串 '{}' 的长度是 {}", s, len);
    
    // 情况3: 所有权可以在函数间传递
    let s1 = gives_ownership();         // 获得函数返回值的所有权
    let s2 = String::from("hello");     // s2获得新创建的字符串所有权
    let s3 = takes_and_gives_back(s2);  // s2的所有权移动到函数，函数返回值的所有权赋给s3
    
    // s1和s3有效，s2已失效
    println!("s1 = {}, s3 = {}", s1, s3);
    // println!("s2 = {}", s2); // 错误：s2的值已被移动
}

// 借用值而不获取所有权
fn calculate_length(s: &String) -> usize {
    s.len()
}

// 创建值并移动所有权给调用者
fn gives_ownership() -> String {
    let s = String::from("yours"); // 创建字符串
    s // 返回s，所有权移动给调用者
}

// 获取参数所有权，然后返回另一个值的所有权
fn takes_and_gives_back(s: String) -> String {
    s // 返回s，所有权移动给调用者
}
```

**解释**：

- Copy类型（如i32）在赋值时进行复制而非所有权移动
- 引用（&）允许临时访问值而不获取所有权
- 所有权可以通过函数参数和返回值在函数间传递

## 常见错误

展示与所有权相关的常见错误及修正：

```rust
fn main() {
    // 错误1: 使用已移动的值
    let s1 = String::from("hello");
    let s2 = s1;
    
    // println!("{}", s1); // 错误：s1的值已被移动
    
    // 错误2: 在函数调用后使用已移动所有权的变量
    let s = String::from("hello");
    takes_ownership(s);
    
    // println!("{}", s); // 错误：s的值已被移动
    
    // 错误3: 返回函数内部创建的引用
    // let reference_to_nothing = dangle(); // 错误：返回悬垂引用
}

// 获取参数的所有权
fn takes_ownership(s: String) {
    println!("{}", s);
} // s离开作用域，被丢弃

// 错误：返回悬垂引用
// fn dangle() -> &String {
//     let s = String::from("hello"); // 创建字符串
//     &s // 返回字符串的引用
// } // s离开作用域，被丢弃，但我们试图返回它的引用
```

**错误原因**：

- 使用已移动的值违反了所有权的唯一性原则
- 函数调用可能会移动参数的所有权，调用后原变量不再有效
- 返回局部变量的引用会导致悬垂引用，因为变量在函数结束时被释放

**正确版本**：

```rust
fn main() {
    // 修正1: 使用克隆而非移动
    let s1 = String::from("hello");
    let s2 = s1.clone(); // 创建深复制，s1仍然有效
    
    println!("s1 = {}, s2 = {}", s1, s2);
    
    // 修正2: 使用引用而非移动所有权
    let s = String::from("hello");
    borrows(&s); // 只借用s，不获取所有权
    
    println!("s仍然有效: {}", s);
    
    // 修正3: 返回拥有所有权的值而非引用
    let s = no_dangle();
    println!("获得所有权: {}", s);
}

// 借用而非获取所有权
fn borrows(s: &String) {
    println!("{}", s);
}

// 返回拥有所有权的值
fn no_dangle() -> String {
    let s = String::from("hello");
    s // 返回s，所有权移动给调用者
}
```

## 性能考量

讨论所有权系统的性能特征：

- **零运行时开销**：所有权检查在编译时完成，运行时没有额外开销
- **内存效率**：自动释放不再需要的内存，无需垃圾收集
- **移动优化**：编译器可以优化某些移动操作，避免不必要的复制
- **预测性能**：资源管理的确定性使性能更可预测
- **缓存友好**：明确的所有权有助于编写缓存友好的代码

## 最佳实践

提供使用所有权系统的最佳实践建议：

1. **尽可能使用引用**：当不需要所有权时，使用引用(&)代替所有权移动
2. **明确所有权移动点**：在代码中清晰标识所有权移动的位置
3. **设计API时考虑所有权**：根据函数是否需要控制资源生命周期决定是获取所有权还是借用
4. **使用Clone时谨慎**：只在必要时使用Clone，因为它可能导致性能开销
5. **利用作用域控制资源生命周期**：使用块作用域控制资源的释放时机
6. **理解Copy和Drop特征**：了解哪些类型实现了Copy（可以隐式复制）和哪些类型实现了Drop（需要显式清理）

## 相关资源

- [Rust所有权章节](https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html)
- [Rust引用与借用](https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html)
- [Rust内存模型](https://doc.rust-lang.org/nomicon/ownership.html)
- [所有权与生命周期的形式化模型](https://arxiv.org/abs/1903.00982)


