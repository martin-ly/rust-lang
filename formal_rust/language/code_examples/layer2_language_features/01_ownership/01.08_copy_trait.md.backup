# Copy Trait（复制特征）

## 元数据

- **概念ID**: 01.08
- **概念名称**: Copy Trait（复制特征）
- **理论层次**: 第二层：语言特征形式化层
- **相关概念**: 01.01 (所有权定义), 01.07 (移动语义)
- **难度级别**: 基础

## 理论简述

Copy Trait是Rust类型系统中用于标记可以按位复制的类型。实现Copy的类型在赋值、传参时不会发生所有权移动，而是直接复制值，原变量仍然有效。

- 基本类型（如i32、f64、bool、char）默认实现Copy
- 复合类型（如结构体体体）所有字段都实现Copy时也可自动实现
- String、Vec等堆分配类型不实现Copy

## 形式化定义

```math
Copy(x, y, v) \iff x = v \land y = v
```

- $Copy(x, y, v)$：x和y都拥有值v，v被复制
- Copy类型赋值不会发生所有权移动

## 代码示例

```rust
fn main() {
    let x = 10; // i32实现了Copy
    let y = x; // x和y都可用
    println!("x = {}, y = {}", x, y);

    #[derive(Copy, Clone)]
    struct Point { x: i32, y: i32 }
    let p1 = Point { x: 1, y: 2 };
    let p2 = p1;
    println!("p1 = ({}, {}), p2 = ({}, {})", p1.x, p1.y, p2.x, p2.y);
}
```

**解释**：

- Copy类型赋值为复制，原变量仍然有效
- 结构体体体所有字段都实现Copy时可自动实现Copy

## 边界情况

```rust
fn main() {
    let s1 = String::from("hello");
    let s2 = s1; // String未实现Copy，发生所有权移动
    // println!("{}", s1); // 错误：s1已失效

    let x = 5;
    let y = x; // i32实现Copy，x和y都可用
    println!("x = {}, y = {}", x, y);
}
```

**解释**：

- String等堆分配类型不实现Copy，赋值时发生所有权移动
- 基本类型实现Copy，赋值时为复制

## 理论映射

- 形式化定义：$Copy(x, y, v)$
- Copy类型：赋值、传参为复制，非Copy类型为移动
- Copy trait：自动实现或手动派生

## 常见错误

```rust
fn main() {
    let s1 = String::from("hello");
    let s2 = s1;
    println!("{}", s1); // 错误：s1已失效
}
```

**错误原因**：

- String未实现Copy，赋值后s1失效

## 总结

Copy trait区分了按位复制与所有权移动，是Rust类型系统安全的基础之一。

"

---

<!-- 以下为按标准模板自动补全的占位章节，待后续填充 -->
"
## 概述
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 技术背景
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 核心概念
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 技术实现
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 形式化分析
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 应用案例
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 性能分析
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 最佳实践
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 常见问题
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 未来值展望
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n


