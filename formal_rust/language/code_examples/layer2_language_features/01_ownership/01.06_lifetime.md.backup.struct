# 生命周期（Lifetime）

## 元数据

- **概念ID**: 01.06
- **概念名称**: 生命周期 (Lifetime)
- **理论层次**: 第二层：语言特征形式化层
- **相关概念**: 01.01 (所有权定义), 01.04 (借用), 01.05 (生命周期), 01.09 (借用检查器)
- **难度级别**: 基础

## 理论简述

生命周期是Rust类型系统用于描述引用有效作用域的机制。每个引用都必须有明确的生命周期，编译器通过生命周期分析保证引用不会悬垂。

- 生命周期参数用`'a`等标记
- 生命周期决定引用的合法作用域
- 生命周期与借用规则共同保证内存安全

## 形式化定义

```math
Lifetime(r) \subseteq Lifetime(x)
```

- $Lifetime(r)$ 表示引用$r$的生命周期
- $Lifetime(x)$ 表示被借用变量$x$的生命周期
- 约束：引用的生命周期不能超过被借用值的生命周期

## 代码示例

```rust
// 返回两个字符串切片中较长者的引用，生命周期由输入参数决定
fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {
    if x.len() > y.len() { x } else { y }
}

fn main() {
    let string1 = String::from("long string is long");
    let result;
    {
        let string2 = String::from("xyz");
        result = longest(string1.as_str(), string2.as_str());
        // string2作用域结束，result引用悬垂（编译器会报错）
    }
    // println!("The longest string is {}", result); // 错误：悬垂引用
}
```

**解释**：

- `longest<'a>`函数声明了生命周期参数`'a`，保证返回值的生命周期不超过输入参数
- 编译器会检查生命周期关系，防止悬垂引用

## 边界情况

```rust
fn main() {
    let r;
    {
        let x = 5;
        r = &x;
        // x离开作用域，r变为悬垂引用
    }
    // println!("r: {}", r); // 错误：r引用无效
}
```

**解释**：

- 不能返回局部变量的引用，生命周期不够长

## 理论映射

- 形式化定义：$Lifetime(r) \subseteq Lifetime(x)$
- 生命周期参数：`'a, 'b, ...`
- 生命周期推导：编译器自动分析大部分场景
- 借用检查器：静态分析生命周期关系，防止悬垂引用

## 常见错误

```rust
fn dangle() -> &String {
    let s = String::from("hello");
    &s // 错误：返回局部变量的引用
}
```

**错误原因**：

- 返回了局部变量的引用，生命周期不够长，导致悬垂引用

## 总结

生命周期机制与所有权、借用共同构成Rust内存安全的基础，防止悬垂引用和数据竞争。


