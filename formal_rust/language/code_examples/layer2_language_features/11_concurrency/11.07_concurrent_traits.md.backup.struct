# 11.07 并发安全trait（Concurrent Traits）

---

## 理论简述

并发安全trait用于标记和约束类型在多线程环境下的安全。Rust通过`Send`和`Sync` trait实现线程安全类型的静态检查，防止数据竞争和未定义行为。相关理论详见[并发系统理论](../../05_concurrency/01_formal_concurrency_system.md)与[Send/Sync trait机制](../../12_traits/07_send_sync.md)。

---

## 核心代码示例

```rust
use std::thread;

fn is_send<T: Send>() {}
fn is_sync<T: Sync>() {}

fn main() {
    is_send::<i32>(); // i32实现Send
    is_sync::<Vec<u8>>(); // Vec<u8>实现Sync

    // 编译期检查自定义类型的并发安全
    struct NotSend(*const u8);
    // is_send::<NotSend>(); // 编译错误：NotSend未实现Send

    // 多线程安全传递数据
    let v = vec![1, 2, 3];
    let handle = thread::spawn(move || {
        println!("{:?}", v);
    });
    handle.join().unwrap();
}
```

---

## 详细注释

- `Send` trait表示类型可在线程间安全移动所有权。
- `Sync` trait表示类型可安全共享引用。
- 编译期静态检查，防止不安全类型跨线程传递。
- 自定义类型可通过实现Send/Sync trait提升并发安全。

---

## 理论映射

- 对应[并发系统理论](../../05_concurrency/01_formal_concurrency_system.md)
- Send/Sync trait机制见[12_traits/07_send_sync.md](../../12_traits/07_send_sync.md)
- 线程模型见[05_concurrency/02_threads.md](../../05_concurrency/02_threads.md)

---

## 边界情况与常见错误

- **边界情况**：
  - 原始指针、非线程安全类型默认不实现Send/Sync。
  - 组合类型的Send/Sync由成员类型决定。
- **常见错误**：
  - 忽略Send/Sync trait导致编译错误。
  - 错误实现Send/Sync导致数据竞争。
  - 误用unsafe代码绕过类型系统。

---

## FAQ

- **Q: Send和Sync有何区别？**
  - A: Send用于所有权移动，Sync用于多线程共享。
- **Q: 如何自定义类型的并发安全？**
  - A: 实现或禁止实现Send/Sync trait。
- **Q: 并发安全trait常见应用场景？**
  - A: 多线程容器、并发算法、跨线程通信等。

---

（本示例可直接用`rustc`编译验证，理论与代码一一对应，便于教学与自动化校验。）


