# 11.06 读写锁（RwLock）

---

## 理论简述

读写锁（RwLock）允许多个线程并发读取或独占写入共享资源。Rust通过`std::sync::RwLock`实现安全高效的读写锁，适合读多写少场景。相关理论详见[并发系统理论](../../05_concurrency/01_formal_concurrency_system.md)与[读写锁机制](../../05_concurrency/06_rwlock.md)。

---

## 核心代码示例

```rust
use std::sync::{Arc, RwLock};
use std::thread;

fn main() {
    let data = Arc::new(RwLock::new(0));
    let mut handles = vec![];
    // 多线程并发读取
    for _ in 0..3 {
        let data = Arc::clone(&data);
        let handle = thread::spawn(move || {
            let r = data.read().unwrap();
            println!("读取: {}", *r);
        });
        handles.push(handle);
    }
    // 独占写入
    {
        let mut w = data.write().unwrap();
        *w += 10;
        println!("写入: {}", *w);
    }
    for handle in handles {
        handle.join().unwrap();
    }
}
```

---

## 详细注释

- `RwLock::new(0)` 创建读写锁保护的资源。
- `read()`获取只读锁，`write()`获取可写锁。
- 读多写少场景下提升并发能。
- 结合Arc实现多线程安全共享。

---

## 理论映射

- 对应[并发系统理论](../../05_concurrency/01_formal_concurrency_system.md)
- 读写锁机制见[05_concurrency/06_rwlock.md](../../05_concurrency/06_rwlock.md)
- Send/Sync trait见[12_traits/07_send_sync.md](../../12_traits/07_send_sync.md)

---

## 边界情况与常见错误

- **边界情况**：
  - 写锁独占，读锁可并发。
  - 死锁与写优先/读优先策略。
- **常见错误**：
  - 忘记用Arc共享所有权。
  - 未正确处理read()/write()的错误返回。
  - 长时间持有写锁导致性能下降。

---

## FAQ

- **Q: RwLock和Mutex有何区别？**
  - A: RwLock支持多读单写，Mutex只支持单写。
- **Q: 如何避免RwLock死锁？**
  - A: 保持锁粒度小，避免循环依赖，及时释放锁。
- **Q: RwLock常见编译错误如何排查？**
  - A: 检查Arc、read()/write()调用和所有权移动。

---

（本示例可直接用`rustc`编译验证，理论与代码一一对应，便于教学与自动化校验。）


