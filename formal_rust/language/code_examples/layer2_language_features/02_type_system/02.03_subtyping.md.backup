# 子类型

## 元数据

- **概念ID**: 02.03
- **概念名称**: 子类型 (Subtyping)
- **理论层次**: 第二层：语言特征形式化层
- **相关概念**: 02.01 (类型推断), 02.02 (类型检查), 02.04 (trait系统)
- **难度级别**: 中级

## 形式化定义

使用统一符号系统(RFUSS)的形式化定义：

```math
T <: U \equiv \forall e. \Gamma \vdash e : T \implies \Gamma \vdash e : U
```

其中：

- $T <: U$ 表示类型$T$是类型$U$的子类型
- $\forall e$ 表示对所有表达式$e$
- $\Gamma \vdash e : T$ 表示在上下文$\Gamma$中表达式$e$具有类型$T$
- $\implies$ 表示蕴含关系
- $\Gamma \vdash e : U$ 表示在上下文$\Gamma$中表达式$e$具有类型$U$

## 代码映射

形式化表示与代码的对应关系：

| 形式化表示 | Rust代码 | 说明 |
|----------|---------|------|
| `T <: U` | `T: U` | 类型T是U的子类型 |
| `∀e. Γ ⊢ e : T` | 所有T类型的值 | 所有类型为T的表达式 |
| `Γ ⊢ e : U` | 可以用于U类型 | 表达式可以用于U类型 |
| `T <: U ∧ U <: V` | `T: U, U: V` | 子类型传递性 |
| `T <: U ∨ U <: T` | 类型关系 | 类型间的包含关系 |

## 基础示例

最小化示例代码，展示子类型的核心概念：

```rust
fn main() {
    // 基本类型的子类型关系
    // i32 <: i64 (在数值上下文中)
    let small: i32 = 42;
    let large: i64 = small as i64; // 子类型转换
    
    // 引用类型的子类型关系
    // &'static str <: &'a str (生命周期子类型)
    let static_str: &'static str = "hello";
    let borrowed_str: &str = static_str; // 生命周期子类型
    
    // 结构体体体子类型关系
    let point = Point { x: 1, y: 2 };
    let movable_point = point; // 移动语义的子类型关系
    
    // 函数指针子类型关系
    let func: fn(i32) -> i32 = |x| x * 2;
    let generic_func: fn(i32) -> i32 = func; // 函数指针子类型
}

#[derive(Debug, Clone)]
struct Point {
    x: i32,
    y: i32,
}
```

**解释**：

- `i32 <: i64` 表示`i32`是`i64`的子类型，可以安全转换
- `&'static str <: &'a str` 表示静态生命周期是任意生命周期的子类型
- 结构体体体通过实现trait建立子类型关系
- 函数指针通过签名匹配建立子类型关系

## 进阶示例

在实际场景中应用子类型概念：

```rust
// trait对象子类型
trait Animal {
    fn make_sound(&self) -> &str;
}

struct Dog {
    name: String,
}

impl Animal for Dog {
    fn make_sound(&self) -> &str {
        "woof"
    }
}

struct Cat {
    name: String,
}

impl Animal for Cat {
    fn make_sound(&self) -> &str {
        "meow"
    }
}

// 泛型约束中的子类型
fn process_animals<T: Animal>(animals: &[T]) {
    for animal in animals {
        println!("{}", animal.make_sound());
    }
}

// 使用trait对象（动态分发）
fn process_animal_objects(animals: &[Box<dyn Animal>]) {
    for animal in animals {
        println!("{}", animal.make_sound());
    }
}

fn main() {
    let dog = Dog { name: "Rex".to_string() };
    let cat = Cat { name: "Whiskers".to_string() };
    
    // 具体类型的子类型关系
    let animals: Vec<Box<dyn Animal>> = vec![
        Box::new(dog),
        Box::new(cat),
    ];
    
    // Dog <: Animal, Cat <: Animal
    process_animal_objects(&animals);
    
    // 泛型函数中的子类型
    let dogs = vec![Dog { name: "Rex".to_string() }];
    process_animals(&dogs);
    
    let cats = vec![Cat { name: "Whiskers".to_string() }];
    process_animals(&cats);
}
```

**解释**：

- `Dog <: Animal` 和 `Cat <: Animal` 通过实现trait建立子类型关系
- `Box<dyn Animal>` 是trait对象，支持动态分发
- 泛型函数`process_animals<T: Animal>` 接受任何实现`Animal` trait的类型
- 子类型关系支持多态性，允许不同类型的值在相同接口下使用

## 边界情况

展示子类型的边界条件和复杂情况：

```rust
// 生命周期子类型
fn longest<'a, 'b: 'a>(x: &'a str, y: &'b str) -> &'a str {
    if x.len() > y.len() {
        x
    } else {
        y
    }
}

// 协变和逆变
struct Container<T> {
    value: T,
}

// 协变：如果 T <: U，那么 Container<T> <: Container<U>
fn process_container(container: &Container<&'static str>) {
    println!("处理容器: {}", container.value);
}

// 逆变：函数参数类型
fn apply_function<F>(f: F, x: i32) -> i32 
where 
    F: Fn(i32) -> i32,
{
    f(x)
}

fn main() {
    // 生命周期子类型测试
    let string1 = String::from("short");
    let string2 = String::from("longer");
    let result = longest(&string1, &string2);
    println!("较长的字符串: {}", result);
    
    // 协变测试
    let static_str = "static string";
    let container = Container { value: static_str };
    process_container(&container);
    
    // 逆变测试
    let func: fn(i32) -> i32 = |x| x * 2;
    let result = apply_function(func, 5);
    println!("函数结果: {}", result);
    
    // 复杂子类型关系
    let numbers: Vec<Box<dyn std::fmt::Display>> = vec![
        Box::new(42),
        Box::new(3.14),
        Box::new("hello"),
    ];
    
    for item in &numbers {
        println!("{}", item);
    }
}
```

**解释**：

- 生命周期子类型：`'b: 'a` 表示`'b`至少与`'a`一样长
- 协变：容器类型保持子类型关系的方向
- 逆变：函数参数类型反转子类型关系
- 复杂子类型：通过trait对象实现多态性

## 常见错误

展示与子类型相关的常见错误及修正：

```rust
fn main() {
    // 错误1: 生命周期不匹配
    // fn return_reference<'a>() -> &'a str {
    //     let s = String::from("hello");
    //     &s // 错误：返回悬垂引用
    // }
    
    // 错误2: trait对象限制
    // let animals: Vec<Box<dyn Animal + Clone>> = vec![
    //     Box::new(Dog { name: "Rex".to_string() }),
    // ]; // 错误：Clone不是对象安全的
    
    // 错误3: 泛型约束不满足
    // fn process<T>(items: &[T]) {
    //     for item in items {
    //         println!("{}", item); // 错误：T没有实现Display
    //     }
    // }
    
    // 错误4: 类型转换失败
    // let x: i32 = 42;
    // let y: &str = x; // 错误：i32不能转换为&str
}
```

**错误原因**：

- 生命周期不匹配：引用的生命周期关系不正确
- trait对象限制：某些trait不能用作对象
- 泛型约束不满足：类型没有实现必需的trait
- 类型转换失败：类型间没有子类型关系

**正确版本**：

```rust
fn main() {
    // 修正1: 返回拥有所有权的值
    fn return_string() -> String {
        String::from("hello")
    }
    
    // 修正2: 使用具体类型
    let animals: Vec<Box<dyn Animal>> = vec![
        Box::new(Dog { name: "Rex".to_string() }),
    ];
    
    // 修正3: 添加泛型约束
    fn process<T: std::fmt::Display>(items: &[T]) {
        for item in items {
            println!("{}", item);
        }
    }
    
    // 修正4: 使用正确的类型转换
    let x: i32 = 42;
    let y: String = x.to_string();
}
```

## 性能考量

讨论子类型系统的性能特征：

- **静态分发**：编译时确定方法调用，零运行时开销
- **动态分发**：运行时确定方法调用，有少量开销
- **内存布局**：trait对象使用虚函数表
- **编译时优化**：编译器可以优化子类型关系
- **类型擦除**：trait对象擦除具体类型信息

## 最佳实践

提供使用子类型系统的最佳实践建议：

1. **优先使用静态分发**：当可能时，使用泛型而非trait对象
2. **理解生命周期子类型**：正确处理引用的生命周期关系
3. **合理设计trait**：确保trait是对象安全的
4. **使用适当的约束**：为泛型函数添加必要的trait约束
5. **测试子类型关系**：编写测试验证子类型行为的正确性
6. **文档化类型关系**：明确记录类型间的子类型关系

## 相关资源

- [Rust子类型](https://doc.rust-lang.org/nomicon/subtyping.html)
- [Rust生命周期](https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html)
- [Rust trait对象](https://doc.rust-lang.org/book/ch17-02-trait-objects.html)
- [Rust泛型](https://doc.rust-lang.org/book/ch10-01-syntax.html)

"

---

<!-- 以下为按标准模板自动补全的占位章节，待后续填充 -->
"
## 概述
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 技术背景
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 核心概念
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 技术实现
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 形式化分析
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 应用案例
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 性能分析
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 常见问题
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 未来值展望
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n


