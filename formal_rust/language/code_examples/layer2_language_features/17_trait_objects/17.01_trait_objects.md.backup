# Trait对象与动态分发 (Trait Objects & Dynamic Dispatch)

## 概述

Trait对象允许在运行时通过指针或引用实现多态，支持动态分发。Rust通过`dyn Trait`实现trait对象，要求trait对象安全。

## 数学定义

### Trait对象

```text
TraitObject(T) = ∃v: v ∈ T ∧ v: dyn T
```

### 动态分发

```text
∀f ∈ methods(T): 调用f(v)时，实际类型由v的动态类型决定
```

### 对象安全

```text
ObjectSafe(T) ⇔ ∀f ∈ methods(T), f不依赖Self Sized, 不返回Self
```

## 代码示例

### 基础trait对象

```rust
trait Draw {
    fn draw(&self);
}

struct Circle {
    radius: f64,
}

struct Square {
    side: f64,
}

impl Draw for Circle {
    fn draw(&self) {
        println!("Draw Circle, radius = {}", self.radius);
    }
}

impl Draw for Square {
    fn draw(&self) {
        println!("Draw Square, side = {}", self.side);
    }
}

fn draw_shape(shape: &dyn Draw) {
    shape.draw();
}

fn main() {
    let c = Circle { radius: 2.0 };
    let s = Square { side: 3.0 };
    draw_shape(&c);
    draw_shape(&s);
}
```

### trait对象集合与动态分发

```rust
fn draw_all(shapes: &[Box<dyn Draw>]) {
    for shape in shapes {
        shape.draw();
    }
}

fn main() {
    let shapes: Vec<Box<dyn Draw>> = vec![
        Box::new(Circle { radius: 1.0 }),
        Box::new(Square { side: 2.0 }),
    ];
    draw_all(&shapes);
}
```

### 对象安全与不安全trait

```rust
trait NotObjectSafe {
    fn new() -> Self where Self: Sized;
    fn id(&self) -> Self;
}

// 下面的trait不能作为trait对象
// let x: &dyn NotObjectSafe; // 编译错误

trait ObjectSafe {
    fn name(&self) -> &str;
}

impl ObjectSafe for Circle {
    fn name(&self) -> &str { "Circle" }
}

// 可以作为trait对象
fn print_name(obj: &dyn ObjectSafe) {
    println!("name: {}", obj.name());
}
```

### 典型用法场景

```rust
// GUI组件统一接口
trait Widget {
    fn render(&self);
}

struct Button;
struct Label;

impl Widget for Button {
    fn render(&self) { println!("Button"); }
}
impl Widget for Label {
    fn render(&self) { println!("Label"); }
}

fn render_all(widgets: &[Box<dyn Widget>]) {
    for w in widgets { w.render(); }
}

fn main() {
    let widgets: Vec<Box<dyn Widget>> = vec![Box::new(Button), Box::new(Label)];
    render_all(&widgets);
}
```

### 边界情况

```rust
// trait对象不能用于不安全trait
trait UnsafeTrait {
    fn foo(self) where Self: Sized;
}
// fn use_obj(obj: &dyn UnsafeTrait) {} // 编译错误

// trait对象不能有泛型方法
trait GenericTrait {
    fn foo<T>(&self, t: T);
}
// fn use_obj(obj: &dyn GenericTrait) {} // 编译错误
```

## 测试用例

```rust
#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn test_draw_trait_object() {
        let c = Circle { radius: 1.0 };
        let s = Square { side: 2.0 };
        draw_shape(&c);
        draw_shape(&s);
    }
    #[test]
    fn test_draw_all() {
        let shapes: Vec<Box<dyn Draw>> = vec![Box::new(Circle { radius: 1.0 }), Box::new(Square { side: 2.0 })];
        draw_all(&shapes);
    }
    #[test]
    fn test_object_safe() {
        let c = Circle { radius: 1.0 };
        print_name(&c);
    }
}
```

## 形式化验证

- 验证trait对象的对象安全
- 检查动态分发的正确性
- 验证trait对象集合的多态性
- 检查边界情况的编译错误

## 性能考虑

1. 动态分发有运行时开销（vtable查找）
2. trait对象不能内联方法
3. trait对象适合接口抽象和插件式架构

## 最佳实践

1. 只为对象安全的trait创建trait对象
2. trait对象适合需要运行时多态的场景
3. 避免在性能敏感路径频繁使用trait对象
4. 文档中注明trait对象的用途和限制

"

---

<!-- 以下为按标准模板自动补全的占位章节，待后续填充 -->
"
## 技术背景
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 核心概念
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 技术实现
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 形式化分析
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 应用案例
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 性能分析
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 常见问题
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 未来值展望
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n


