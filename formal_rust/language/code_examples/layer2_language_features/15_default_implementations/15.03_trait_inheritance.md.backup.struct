# Trait继承 (Trait Inheritance)

## 概述

Trait继承允许一个trait继承另一个trait的功能，实现代码复用和层次化设计。

## 数学定义

### 继承关系

```text
Trait A extends Trait B
∀x: A(x) → B(x)
```

### 方法继承

```text
∀m ∈ methods(B): A inherits m
∀impl A for T: T must implement B
```

## 代码示例

### 基础继承

```rust
// 基础trait
trait Animal {
    fn name(&self) -> &str;
    fn make_sound(&self) -> &str;
}

// 继承trait
trait Pet: Animal {
    fn owner(&self) -> &str;
    fn is_friendly(&self) -> bool {
        true // 默认实现
    }
}

// 实现基础trait
struct Dog {
    name: String,
    owner: String,
}

impl Animal for Dog {
    fn name(&self) -> &str {
        &self.name
    }
    
    fn make_sound(&self) -> &str {
        "Woof!"
    }
}

// 实现继承trait
impl Pet for Dog {
    fn owner(&self) -> &str {
        &self.owner
    }
    
    // 使用默认实现
    fn is_friendly(&self) -> bool {
        true
    }
}

// 使用示例
fn main() {
    let dog = Dog {
        name: "Buddy".to_string(),
        owner: "Alice".to_string(),
    };
    
    // 可以调用Animal的方法
    println!("Name: {}", dog.name());
    println!("Sound: {}", dog.make_sound());
    
    // 可以调用Pet的方法
    println!("Owner: {}", dog.owner());
    println!("Friendly: {}", dog.is_friendly());
}
```

### 多重继承

```rust
// 多个基础trait
trait Movable {
    fn move_to(&self, x: f64, y: f64);
}

trait Drawable {
    fn draw(&self);
}

// 继承多个trait
trait GameObject: Movable + Drawable {
    fn update(&self);
}

struct Player {
    x: f64,
    y: f64,
}

impl Movable for Player {
    fn move_to(&self, x: f64, y: f64) {
        println!("Moving to ({}, {})", x, y);
    }
}

impl Drawable for Player {
    fn draw(&self) {
        println!("Drawing player at ({}, {})", self.x, self.y);
    }
}

impl GameObject for Player {
    fn update(&self) {
        println!("Updating player");
    }
}
```

### 条件继承

```rust
// 条件继承
trait Container<T> {
    fn add(&mut self, item: T);
    fn remove(&mut self) -> Option<T>;
}

trait SortedContainer<T: Ord>: Container<T> {
    fn sort(&mut self);
}

struct VecContainer<T> {
    items: Vec<T>,
}

impl<T> Container<T> for VecContainer<T> {
    fn add(&mut self, item: T) {
        self.items.push(item);
    }
    
    fn remove(&mut self) -> Option<T> {
        self.items.pop()
    }
}

impl<T: Ord> SortedContainer<T> for VecContainer<T> {
    fn sort(&mut self) {
        self.items.sort();
    }
}
```

### 继承链

```rust
// 三层继承链
trait Base {
    fn base_method(&self) -> &str;
}

trait Intermediate: Base {
    fn intermediate_method(&self) -> &str;
}

trait Advanced: Intermediate {
    fn advanced_method(&self) -> &str;
}

struct MyStruct;

impl Base for MyStruct {
    fn base_method(&self) -> &str {
        "Base method"
    }
}

impl Intermediate for MyStruct {
    fn intermediate_method(&self) -> &str {
        "Intermediate method"
    }
}

impl Advanced for MyStruct {
    fn advanced_method(&self) -> &str {
        "Advanced method"
    }
}

// 使用示例
fn process_advanced<T: Advanced>(item: &T) {
    println!("{}", item.base_method());
    println!("{}", item.intermediate_method());
    println!("{}", item.advanced_method());
}
```

### 泛型继承

```rust
// 泛型trait继承
trait Collection<T> {
    fn add(&mut self, item: T);
    fn len(&self) -> usize;
}

trait IndexedCollection<T>: Collection<T> {
    fn get(&self, index: usize) -> Option<&T>;
    fn set(&mut self, index: usize, item: T) -> Result<(), &'static str>;
}

struct Array<T> {
    data: Vec<T>,
}

impl<T> Collection<T> for Array<T> {
    fn add(&mut self, item: T) {
        self.data.push(item);
    }
    
    fn len(&self) -> usize {
        self.data.len()
    }
}

impl<T> IndexedCollection<T> for Array<T> {
    fn get(&self, index: usize) -> Option<&T> {
        self.data.get(index)
    }
    
    fn set(&mut self, index: usize, item: T) -> Result<(), &'static str> {
        if index < self.data.len() {
            self.data[index] = item;
            Ok(())
        } else {
            Err("Index out of bounds")
        }
    }
}
```

### 继承与默认实现

```rust
// 带默认实现的继承
trait Logger {
    fn log(&self, message: &str);
    fn log_error(&self, error: &str) {
        self.log(&format!("ERROR: {}", error));
    }
}

trait FileLogger: Logger {
    fn write_to_file(&self, content: &str);
    
    fn log(&self, message: &str) {
        self.write_to_file(message);
    }
}

struct SimpleFileLogger {
    filename: String,
}

impl FileLogger for SimpleFileLogger {
    fn write_to_file(&self, content: &str) {
        println!("Writing to {}: {}", self.filename, content);
    }
}

// 使用示例
fn main() {
    let logger = SimpleFileLogger {
        filename: "app.log".to_string(),
    };
    
    logger.log("Application started");
    logger.log_error("Something went wrong");
}
```

## 测试验证

```rust
#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn test_trait_inheritance() {
        let dog = Dog {
            name: "Rex".to_string(),
            owner: "Bob".to_string(),
        };
        
        assert_eq!(dog.name(), "Rex");
        assert_eq!(dog.make_sound(), "Woof!");
        assert_eq!(dog.owner(), "Bob");
        assert!(dog.is_friendly());
    }
    
    #[test]
    fn test_multiple_inheritance() {
        let player = Player { x: 10.0, y: 20.0 };
        
        // 测试所有继承的方法
        player.move_to(30.0, 40.0);
        player.draw();
        player.update();
    }
    
    #[test]
    fn test_conditional_inheritance() {
        let mut container: VecContainer<i32> = VecContainer { items: vec![] };
        
        container.add(3);
        container.add(1);
        container.add(2);
        
        assert_eq!(container.len(), 3);
        
        container.sort();
        
        assert_eq!(container.get(0), Some(&1));
        assert_eq!(container.get(1), Some(&2));
        assert_eq!(container.get(2), Some(&3));
    }
}
```

## 形式化验证

### 继承关系验证

- 确保继承trait的所有方法都被实现
- 验证继承链的完整性
- 检查类型约束的传递性

### 方法解析验证

- 验证方法调用的正确性
- 确保默认实现的一致性
- 检查方法覆盖的合法性

## 性能考虑

1. **方法查找**: 继承链越长，方法查找开销越大
2. **代码生成**: 编译器需要为每个继承层次生成代码
3. **内存布局**: 继承可能影响对象的内存布局

## 最佳实践

1. **保持继承层次浅**: 避免过深的继承链
2. **使用组合优于继承**: 在可能的情况下使用组合
3. **明确接口**: 确保继承的trait有清晰的接口定义
4. **文档化**: 为继承关系提供清晰的文档

