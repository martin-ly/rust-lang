# 默认实现

## 元数据

- **概念ID**: 15.01
- **概念名称**: 默认实现 (Default Implementations)
- **理论层次**: 第二层：语言特征形式化层
- **相关概念**: 14.01 (类型约束), 14.02 (trait对象), 14.03 (关联类型)
- **难度级别**: 高级

## 形式化定义

使用统一符号系统(RFUSS)的形式化定义：

```math
\text{DefaultImpl}(T, M) \equiv \forall t \in T. \exists m \in M. \text{Define}(t, m) \land \text{Override}(t, m)
```

其中：

- $\text{DefaultImpl}(T, M)$ 表示trait $T$ 和默认方法集合 $M$ 的默认实现
- $\forall t \in T$ 表示对所有trait $t$ 在trait集合 $T$ 中
- $\exists m \in M$ 表示存在默认方法 $m$ 在默认方法集合 $M$ 中
- $\text{Define}(t, m)$ 表示trait $t$ 定义默认方法 $m$
- $\text{Override}(t, m)$ 表示类型可以重写默认方法 $m$

## 代码映射

形式化表示与代码的对应关系：

| 形式化表示 | Rust代码 | 说明 |
|----------|---------|------|
| `DefaultImpl(T, M)` | trait中的默认方法 | 默认实现系统 |
| `∀t ∈ T` | 所有trait | trait定义 |
| `∃m ∈ M` | 默认方法 | 方法存在 |
| `Define(t, m)` | fn method(&self) { ... } | 默认方法定义 |
| `Override(t, m)` | impl Trait for Type | 方法重写 |

## 基础示例

最小化示例代码，展示默认实现的核心概念：

```rust
// 基本默认实现
fn basic_default_implementations() {
    // 使用默认实现
    let calculator = Calculator;
    let result = calculator.add(5, 3);
    println!("计算结果: {}", result);
    
    // 使用重写的默认实现
    let advanced_calculator = AdvancedCalculator;
    let result = advanced_calculator.add(5, 3);
    println!("高级计算结果: {}", result);
}

// 定义带默认实现的trait
trait Calculator {
    fn add(&self, a: i32, b: i32) -> i32 {
        a + b
    }
    
    fn subtract(&self, a: i32, b: i32) -> i32 {
        a - b
    }
    
    fn multiply(&self, a: i32, b: i32) -> i32 {
        a * b
    }
    
    fn divide(&self, a: i32, b: i32) -> Result<i32, String> {
        if b == 0 {
            Err("除数不能为零".to_string())
        } else {
            Ok(a / b)
        }
    }
}

// 使用默认实现
struct Calculator;

impl Calculator for Calculator {
    // 使用默认实现，不需要重写
}

// 重写默认实现
struct AdvancedCalculator;

impl Calculator for AdvancedCalculator {
    fn add(&self, a: i32, b: i32) -> i32 {
        println!("使用高级加法算法");
        a + b + 1 // 重写默认实现
    }
    
    fn multiply(&self, a: i32, b: i32) -> i32 {
        println!("使用高级乘法算法");
        a * b * 2 // 重写默认实现
    }
}

// 部分默认实现
trait DataProcessor {
    fn process(&self, data: &str) -> String {
        format!("处理结果: {}", data.to_uppercase())
    }
    
    fn validate(&self, data: &str) -> bool {
        !data.is_empty()
    }
    
    fn transform(&self, data: &str) -> String {
        data.to_string() // 默认实现
    }
}

struct SimpleProcessor;

impl DataProcessor for SimpleProcessor {
    // 使用所有默认实现
}

struct CustomProcessor;

impl DataProcessor for CustomProcessor {
    fn process(&self, data: &str) -> String {
        format!("自定义处理: {}", data.to_lowercase())
    }
    
    fn transform(&self, data: &str) -> String {
        format!("转换结果: {}", data.chars().rev().collect::<String>())
    }
}

// 带关联类型的默认实现
trait Container {
    type Item;
    
    fn add(&mut self, item: Self::Item);
    
    fn remove(&mut self) -> Option<Self::Item>;
    
    fn is_empty(&self) -> bool {
        self.len() == 0
    }
    
    fn len(&self) -> usize;
    
    fn clear(&mut self) {
        while self.remove().is_some() {}
    }
}

struct SimpleContainer<T> {
    items: Vec<T>,
}

impl<T> Container for SimpleContainer<T> {
    type Item = T;
    
    fn add(&mut self, item: Self::Item) {
        self.items.push(item);
    }
    
    fn remove(&mut self) -> Option<Self::Item> {
        self.items.pop()
    }
    
    fn len(&self) -> usize {
        self.items.len()
    }
}

fn main() {
    println!("=== 基本默认实现 ===");
    basic_default_implementations();
    
    println!("\n=== 部分默认实现 ===");
    let simple_processor = SimpleProcessor;
    let custom_processor = CustomProcessor;
    
    let test_data = "Hello World";
    
    println!("简单处理器:");
    println!("  验证: {}", simple_processor.validate(test_data));
    println!("  处理: {}", simple_processor.process(test_data));
    println!("  转换: {}", simple_processor.transform(test_data));
    
    println!("\n自定义处理器:");
    println!("  验证: {}", custom_processor.validate(test_data));
    println!("  处理: {}", custom_processor.process(test_data));
    println!("  转换: {}", custom_processor.transform(test_data));
    
    println!("\n=== 容器默认实现 ===");
    let mut container = SimpleContainer { items: Vec::new() };
    
    container.add(1);
    container.add(2);
    container.add(3);
    
    println!("容器长度: {}", container.len());
    println!("容器为空: {}", container.is_empty());
    
    while let Some(item) = container.remove() {
        println!("移除项目: {}", item);
    }
    
    println!("容器为空: {}", container.is_empty());
}
```

**解释**：

- 默认方法定义：在trait中使用 `fn method(&self) { ... }` 定义默认实现
- 使用默认实现：impl块中不需要重写方法
- 重写默认实现：在impl块中提供新的实现
- 部分默认实现：只重写需要的方法，其他使用默认实现
- 关联类型默认实现：为带关联类型的trait提供默认实现

## 进阶示例

在实际场景中应用默认实现概念：

```rust
use std::collections::HashMap;
use std::fmt::{Debug, Display};

// 高级默认实现示例
trait Logger {
    fn log(&self, level: &str, message: &str) {
        println!("[{}] {}", level, message);
    }
    
    fn info(&self, message: &str) {
        self.log("INFO", message);
    }
    
    fn warn(&self, message: &str) {
        self.log("WARN", message);
    }
    
    fn error(&self, message: &str) {
        self.log("ERROR", message);
    }
    
    fn debug(&self, message: &str) {
        self.log("DEBUG", message);
    }
}

struct ConsoleLogger;

impl Logger for ConsoleLogger {
    // 使用所有默认实现
}

struct FileLogger {
    file_path: String,
}

impl Logger for FileLogger {
    fn log(&self, level: &str, message: &str) {
        println!("[{}] {} -> 写入文件: {}", level, message, self.file_path);
    }
}

struct NetworkLogger {
    endpoint: String,
}

impl Logger for NetworkLogger {
    fn log(&self, level: &str, message: &str) {
        println!("[{}] {} -> 发送到: {}", level, message, self.endpoint);
    }
    
    fn error(&self, message: &str) {
        self.log("CRITICAL", message); // 重写error方法
    }
}

// 构建器模式的默认实现
trait Builder {
    type Product;
    
    fn new() -> Self;
    
    fn with_name(self, name: String) -> Self;
    
    fn with_description(self, description: String) -> Self;
    
    fn with_version(self, version: String) -> Self;
    
    fn build(self) -> Self::Product;
    
    fn validate(&self) -> bool {
        true // 默认验证总是通过
    }
}

struct AppBuilder {
    name: Option<String>,
    description: Option<String>,
    version: Option<String>,
}

impl Builder for AppBuilder {
    type Product = App;
    
    fn new() -> Self {
        AppBuilder {
            name: None,
            description: None,
            version: None,
        }
    }
    
    fn with_name(mut self, name: String) -> Self {
        self.name = Some(name);
        self
    }
    
    fn with_description(mut self, description: String) -> Self {
        self.description = Some(description);
        self
    }
    
    fn with_version(mut self, version: String) -> Self {
        self.version = Some(version);
        self
    }
    
    fn build(self) -> Self::Product {
        App {
            name: self.name.unwrap_or_else(|| "Default App".to_string()),
            description: self.description.unwrap_or_else(|| "No description".to_string()),
            version: self.version.unwrap_or_else(|| "1.0.0".to_string()),
        }
    }
}

struct App {
    name: String,
    description: String,
    version: String,
}

// 状态机的默认实现
trait StateMachine {
    type State;
    type Event;
    
    fn current_state(&self) -> &Self::State;
    
    fn handle_event(&mut self, event: Self::Event) -> Result<(), String> {
        // 默认实现：总是成功
        Ok(())
    }
    
    fn can_transition(&self, _event: &Self::Event) -> bool {
        true // 默认允许所有转换
    }
    
    fn on_enter_state(&mut self, _state: &Self::State) {
        // 默认实现：无操作
    }
    
    fn on_exit_state(&mut self, _state: &Self::State) {
        // 默认实现：无操作
    }
}

struct SimpleStateMachine {
    state: String,
}

impl StateMachine for SimpleStateMachine {
    type State = String;
    type Event = String;
    
    fn current_state(&self) -> &Self::State {
        &self.state
    }
    
    fn handle_event(&mut self, event: Self::Event) -> Result<(), String> {
        println!("状态转换: {} -> {}", self.state, event);
        self.state = event;
        Ok(())
    }
}

// 配置系统的默认实现
trait ConfigProvider {
    type Config;
    
    fn get_config(&self) -> &Self::Config;
    
    fn set_config(&mut self, config: Self::Config);
    
    fn validate_config(&self, _config: &Self::Config) -> bool {
        true // 默认验证总是通过
    }
    
    fn load_default_config(&mut self) {
        // 默认实现：使用默认配置
    }
    
    fn save_config(&self) -> Result<(), String> {
        // 默认实现：总是成功
        Ok(())
    }
}

struct AppConfig {
    database_url: String,
    server_port: u16,
    debug_mode: bool,
}

struct ConfigManager {
    config: AppConfig,
}

impl ConfigProvider for ConfigManager {
    type Config = AppConfig;
    
    fn get_config(&self) -> &Self::Config {
        &self.config
    }
    
    fn set_config(&mut self, config: Self::Config) {
        if self.validate_config(&config) {
            self.config = config;
        }
    }
    
    fn validate_config(&self, config: &Self::Config) -> bool {
        !config.database_url.is_empty() && config.server_port > 0
    }
    
    fn load_default_config(&mut self) {
        self.config = AppConfig {
            database_url: "postgresql://localhost:5432/mydb".to_string(),
            server_port: 8080,
            debug_mode: false,
        };
    }
}

// 验证器的默认实现
trait Validator<T> {
    fn validate(&self, data: &T) -> bool;
    
    fn validate_all(&self, data_list: &[T]) -> bool {
        data_list.iter().all(|item| self.validate(item))
    }
    
    fn get_errors(&self, _data: &T) -> Vec<String> {
        Vec::new() // 默认无错误
    }
    
    fn is_valid(&self, data: &T) -> bool {
        self.validate(data)
    }
}

struct StringValidator {
    min_length: usize,
}

impl Validator<String> for StringValidator {
    fn validate(&self, data: &String) -> bool {
        data.len() >= self.min_length
    }
    
    fn get_errors(&self, data: &String) -> Vec<String> {
        let mut errors = Vec::new();
        if data.len() < self.min_length {
            errors.push(format!("字符串长度不能小于{}", self.min_length));
        }
        errors
    }
}

struct NumberValidator {
    min_value: i32,
    max_value: i32,
}

impl Validator<i32> for NumberValidator {
    fn validate(&self, data: &i32) -> bool {
        *data >= self.min_value && *data <= self.max_value
    }
    
    fn get_errors(&self, data: &i32) -> Vec<String> {
        let mut errors = Vec::new();
        if *data < self.min_value {
            errors.push(format!("数字不能小于{}", self.min_value));
        }
        if *data > self.max_value {
            errors.push(format!("数字不能大于{}", self.max_value));
        }
        errors
    }
}

fn main() {
    // 日志系统测试
    println!("=== 日志系统默认实现 ===");
    let console_logger = ConsoleLogger;
    let file_logger = FileLogger { file_path: "app.log".to_string() };
    let network_logger = NetworkLogger { endpoint: "api.logs.com".to_string() };
    
    console_logger.info("应用启动");
    file_logger.warn("磁盘空间不足");
    network_logger.error("网络连接失败");
    
    // 构建器测试
    println!("\n=== 构建器默认实现 ===");
    let app = AppBuilder::new()
        .with_name("MyApp".to_string())
        .with_description("A great application".to_string())
        .with_version("2.0.0".to_string())
        .build();
    
    println!("应用: {} v{}", app.name, app.version);
    println!("描述: {}", app.description);
    
    // 状态机测试
    println!("\n=== 状态机默认实现 ===");
    let mut state_machine = SimpleStateMachine {
        state: "初始".to_string(),
    };
    
    println!("当前状态: {}", state_machine.current_state());
    
    match state_machine.handle_event("运行中".to_string()) {
        Ok(_) => println!("状态转换成功"),
        Err(e) => println!("状态转换失败: {}", e),
    }
    
    println!("当前状态: {}", state_machine.current_state());
    
    // 配置系统测试
    println!("\n=== 配置系统默认实现 ===");
    let mut config_manager = ConfigManager {
        config: AppConfig {
            database_url: "".to_string(),
            server_port: 0,
            debug_mode: false,
        },
    };
    
    config_manager.load_default_config();
    let config = config_manager.get_config();
    println!("数据库URL: {}", config.database_url);
    println!("服务器端口: {}", config.server_port);
    println!("调试模式: {}", config.debug_mode);
    
    // 验证器测试
    println!("\n=== 验证器默认实现 ===");
    let string_validator = StringValidator { min_length: 3 };
    let number_validator = NumberValidator { min_value: 1, max_value: 100 };
    
    let test_strings = vec!["a", "hello", "world"];
    let test_numbers = vec![0, 50, 150];
    
    println!("字符串验证:");
    for s in &test_strings {
        let is_valid = string_validator.validate(s);
        let errors = string_validator.get_errors(s);
        println!("  '{}': {} {:?}", s, is_valid, errors);
    }
    
    println!("\n数字验证:");
    for n in &test_numbers {
        let is_valid = number_validator.validate(n);
        let errors = number_validator.get_errors(n);
        println!("  {}: {} {:?}", n, is_valid, errors);
    }
    
    println!("\n批量验证:");
    println!("  所有字符串有效: {}", string_validator.validate_all(&test_strings));
    println!("  所有数字有效: {}", number_validator.validate_all(&test_numbers));
}
```

**解释**：

- 日志系统：为不同类型的日志器提供默认实现
- 构建器模式：为构建器提供默认的验证和构建逻辑
- 状态机：为状态机提供默认的状态转换逻辑
- 配置系统：为配置提供默认的验证和加载逻辑
- 验证器：为验证器提供默认的批量验证逻辑

## 边界情况

展示默认实现的边界条件和复杂情况：

```rust
use std::marker::PhantomData;

// 高级默认实现边界情况
trait TypeFamily {
    type Input;
    type Output;
    type Error;
}

struct Identity;
struct Double;
struct Square;

impl TypeFamily for Identity {
    type Input = i32;
    type Output = i32;
    type Error = String;
}

impl TypeFamily for Double {
    type Input = i32;
    type Output = i32;
    type Error = String;
}

impl TypeFamily for Square {
    type Input = i32;
    type Output = i32;
    type Error = String;
}

// 默认实现的类型级函数
trait TypeFunction {
    type Input;
    type Output;
    
    fn apply(&self, input: Self::Input) -> Self::Output;
    
    fn apply_default(&self, input: Self::Input) -> Self::Output {
        self.apply(input) // 默认实现调用具体实现
    }
    
    fn compose<F>(&self, other: &F) -> ComposedFunction<Self, F>
    where
        F: TypeFunction<Input = Self::Output>,
        Self: Sized,
    {
        ComposedFunction {
            first: PhantomData,
            second: PhantomData,
        }
    }
}

struct IdentityFunction;
struct DoubleFunction;
struct SquareFunction;

impl TypeFunction for IdentityFunction {
    type Input = i32;
    type Output = i32;
    
    fn apply(&self, input: Self::Input) -> Self::Output {
        input
    }
}

impl TypeFunction for DoubleFunction {
    type Input = i32;
    type Output = i32;
    
    fn apply(&self, input: Self::Input) -> Self::Output {
        input * 2
    }
}

impl TypeFunction for SquareFunction {
    type Input = i32;
    type Output = i32;
    
    fn apply(&self, input: Self::Input) -> Self::Output {
        input * input
    }
}

struct ComposedFunction<F, G> {
    first: PhantomData<F>,
    second: PhantomData<G>,
}

// 递归默认实现
trait RecursiveProcessor {
    type Input;
    type Output;
    
    fn process(&self, input: Self::Input) -> Self::Output;
    
    fn process_recursive(&self, input: Self::Input, depth: usize) -> Self::Output {
        if depth == 0 {
            self.process(input)
        } else {
            let intermediate = self.process(input);
            self.process_recursive(intermediate, depth - 1)
        }
    }
}

struct BaseProcessor;

impl RecursiveProcessor for BaseProcessor {
    type Input = i32;
    type Output = i32;
    
    fn process(&self, input: Self::Input) -> Self::Output {
        input + 1
    }
}

// 依赖注入的默认实现
trait Service {
    type Config;
    type Result;
    
    fn execute(&self, config: &Self::Config) -> Self::Result;
    
    fn execute_with_default_config(&self) -> Self::Result {
        let default_config = self.get_default_config();
        self.execute(&default_config)
    }
    
    fn get_default_config(&self) -> Self::Config;
}

struct ServiceA;
struct ServiceB;

impl Service for ServiceA {
    type Config = String;
    type Result = i32;
    
    fn execute(&self, config: &Self::Config) -> Self::Result {
        config.len() as i32
    }
    
    fn get_default_config(&self) -> Self::Config {
        "default".to_string()
    }
}

impl Service for ServiceB {
    type Config = i32;
    type Result = String;
    
    fn execute(&self, config: &Self::Config) -> Self::Result {
        format!("处理结果: {}", config * 2)
    }
    
    fn get_default_config(&self) -> Self::Config {
        42
    }
}

struct Container<S: Service> {
    service: S,
}

impl<S: Service> Container<S> {
    fn new(service: S) -> Self {
        Container { service }
    }
    
    fn run(&self, config: &S::Config) -> S::Result {
        self.service.execute(config)
    }
    
    fn run_with_default(&self) -> S::Result {
        self.service.execute_with_default_config()
    }
}

// 配置验证的默认实现
trait ConfigValidator {
    type Config;
    type Error;
    
    fn validate(&self, config: &Self::Config) -> Result<(), Self::Error>;
    
    fn validate_with_defaults(&self, config: &Self::Config) -> Result<(), Self::Error> {
        // 默认实现：先验证，然后应用默认值
        self.validate(config)?;
        self.apply_defaults(config);
        Ok(())
    }
    
    fn apply_defaults(&self, _config: &Self::Config) {
        // 默认实现：无操作
    }
    
    fn get_default_config(&self) -> Self::Config;
}

struct StringConfigValidator;
struct NumberConfigValidator;

impl ConfigValidator for StringConfigValidator {
    type Config = String;
    type Error = String;
    
    fn validate(&self, config: &Self::Config) -> Result<(), Self::Error> {
        if config.is_empty() {
            Err("配置不能为空".to_string())
        } else {
            Ok(())
        }
    }
    
    fn get_default_config(&self) -> Self::Config {
        "default".to_string()
    }
}

impl ConfigValidator for NumberConfigValidator {
    type Config = i32;
    type Error = String;
    
    fn validate(&self, config: &Self::Config) -> Result<(), Self::Error> {
        if *config <= 0 {
            Err("配置必须大于0".to_string())
        } else {
            Ok(())
        }
    }
    
    fn get_default_config(&self) -> Self::Config {
        100
    }
}

fn main() {
    // 类型级函数测试
    println!("=== 类型级函数默认实现 ===");
    let functions: Vec<Box<dyn TypeFunction<Input = i32, Output = i32>>> = vec![
        Box::new(IdentityFunction),
        Box::new(DoubleFunction),
        Box::new(SquareFunction),
    ];
    
    for function in &functions {
        let result = function.apply_default(5);
        println!("函数结果: {}", result);
    }
    
    // 递归处理器测试
    println!("\n=== 递归处理器默认实现 ===");
    let processor = BaseProcessor;
    
    let result1 = processor.process_recursive(1, 0);
    let result2 = processor.process_recursive(1, 1);
    let result3 = processor.process_recursive(1, 2);
    
    println!("递归深度0: {}", result1);
    println!("递归深度1: {}", result2);
    println!("递归深度2: {}", result3);
    
    // 依赖注入测试
    println!("\n=== 依赖注入默认实现 ===");
    let container_a = Container::new(ServiceA);
    let container_b = Container::new(ServiceB);
    
    let result_a1 = container_a.run(&"hello".to_string());
    let result_a2 = container_a.run_with_default();
    
    let result_b1 = container_b.run(&42);
    let result_b2 = container_b.run_with_default();
    
    println!("服务A - 自定义配置: {}", result_a1);
    println!("服务A - 默认配置: {}", result_a2);
    println!("服务B - 自定义配置: {}", result_b1);
    println!("服务B - 默认配置: {}", result_b2);
    
    // 配置验证测试
    println!("\n=== 配置验证默认实现 ===");
    let string_validator = StringConfigValidator;
    let number_validator = NumberConfigValidator;
    
    let test_strings = vec!["", "hello"];
    let test_numbers = vec![0, 50];
    
    for s in test_strings {
        match string_validator.validate_with_defaults(&s.to_string()) {
            Ok(_) => println!("字符串'{}'验证通过", s),
            Err(e) => println!("字符串'{}'验证失败: {}", s, e),
        }
    }
    
    for n in test_numbers {
        match number_validator.validate_with_defaults(&n) {
            Ok(_) => println!("数字{}验证通过", n),
            Err(e) => println!("数字{}验证失败: {}", n, e),
        }
    }
}
```

**解释**：

- 类型级函数：在默认实现中进行类型计算
- 递归结构体：支持递归默认实现定义
- 依赖注入：根据服务类型注入默认实现
- 配置验证：根据配置类型验证默认实现

## 常见错误

展示与默认实现相关的常见错误及修正：

```rust
fn main() {
    // 错误1: 默认实现调用自身导致无限递归
    // trait Processor {
    //     fn process(&self, data: &str) -> String {
    //         self.process(data) // 错误：无限递归
    //     }
    // }
    
    // 错误2: 默认实现访问不存在的字段
    // trait Container {
    //     fn get_count(&self) -> usize {
    //         self.items.len() // 错误：items字段不存在
    //     }
    // }
    
    // 错误3: 默认实现返回类型不匹配
    // trait Converter {
    //     fn convert(&self, input: i32) -> String {
    //         input // 错误：返回类型不匹配
    //     }
    // }
    
    // 错误4: 默认实现参数类型不匹配
    // trait Processor {
    //     fn process(&self, data: &str) -> String {
    //         data.to_string()
    //     }
    // }
    // impl Processor for MyType {
    //     fn process(&self, data: i32) -> String { // 错误：参数类型不匹配
    //         data.to_string()
    //     }
    // }
}

// 正确版本
fn main() {
    // 修正1: 避免无限递归
    trait Processor {
        fn process(&self, data: &str) -> String {
            format!("处理结果: {}", data)
        }
    }
    
    // 修正2: 使用正确的字段访问
    trait Container {
        fn get_count(&self) -> usize {
            0 // 默认实现返回0
        }
    }
    
    // 修正3: 返回类型匹配
    trait Converter {
        fn convert(&self, input: i32) -> String {
            input.to_string() // 正确：转换为String
        }
    }
    
    // 修正4: 参数类型匹配
    trait Processor {
        fn process(&self, data: &str) -> String {
            data.to_string()
        }
    }
    
    struct MyType;
    
    impl Processor for MyType {
        fn process(&self, data: &str) -> String { // 正确：参数类型匹配
            format!("自定义处理: {}", data)
        }
    }
}
```

**错误原因**：

- 无限递归：默认实现调用自身导致无限递归
- 字段访问错误：访问不存在的字段或方法
- 类型不匹配：返回类型或参数类型不匹配
- 方法签名错误：重写方法时签名不匹配

## 性能考量

讨论默认实现的性能特征：

- **编译时检查**：默认实现在编译时检查，运行时无开销
- **代码生成**：每个具体类型都会生成对应的代码
- **方法调用开销**：默认实现的方法调用与普通方法相同
- **内存布局**：默认实现不影响运行时内存布局
- **优化机会**：编译器可以优化默认实现

## 最佳实践

提供使用默认实现的最佳实践建议：

1. **提供合理的默认行为**：为trait提供有意义的默认实现
2. **避免复杂逻辑**：默认实现应该简单且易于理解
3. **考虑性能影响**：默认实现不应该有显著的性能开销
4. **文档化默认行为**：为默认实现提供清晰的文档
5. **测试默认实现**：编写测试验证默认实现的行为
6. **允许重写**：确保默认实现可以被重写
7. **使用关联类型**：在默认实现中合理使用关联类型
8. **避免副作用**：默认实现应该避免意外的副作用

## 相关资源

- [Rust trait默认实现](https://doc.rust-lang.org/book/ch10-02-traits.html)
- [trait约束](https://doc.rust-lang.org/book/ch10-02-traits.html)
- [关联类型](https://doc.rust-lang.org/book/ch19-03-advanced-traits.html)
- [方法重写](https://doc.rust-lang.org/book/ch10-02-traits.html)
- [trait对象](https://doc.rust-lang.org/book/ch17-02-trait-objects.html)


