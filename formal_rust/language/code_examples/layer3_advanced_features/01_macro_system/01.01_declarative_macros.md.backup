# 声明宏 (Declarative Macros)

## 概述

声明宏通过模式匹配和代码生成实现代码复用，是Rust的元编程核心机制。

## 数学定义

### 宏展开

```text
MacroExpand(m, args) = PatternMatch(args, m.patterns) → CodeGen(m.body)
```

### 宏规则

```text
MacroRule = Pattern → Expression
Pattern = TokenTree | Repetition | Delimiter
```

### 卫生宏

```text
HygienicMacro(m) ⇔ ∀var ∈ m.body: var ∉ caller_scope
```

## 代码示例

### 基础声明宏

```rust
macro_rules! greet {
    ($name:expr) => {
        println!("Hello, {}!", $name);
    };
}

fn main() {
    greet!("Alice");
    greet!("Bob");
}
```

### 多模式宏

```rust
macro_rules! print_values {
    ($x:expr) => {
        println!("Value: {}", $x);
    };
    ($x:expr, $y:expr) => {
        println!("Values: {}, {}", $x, $y);
    };
    ($x:expr, $y:expr, $z:expr) => {
        println!("Values: {}, {}, {}", $x, $y, $z);
    };
}

fn main() {
    print_values!(42);
    print_values!(1, 2);
    print_values!(1, 2, 3);
}
```

### 重复模式宏

```rust
macro_rules! vector {
    ($($x:expr),*) => {
        {
            let mut temp_vec = Vec::new();
            $(temp_vec.push($x);)*
            temp_vec
        }
    };
}

fn main() {
    let v = vector![1, 2, 3, 4, 5];
    println!("Vector: {:?}", v);
}
```

### 递归宏

```rust
macro_rules! count {
    () => (0);
    ($head:expr) => (1);
    ($head:expr, $($tail:expr),*) => (1 + count!($($tail),*));
}

fn main() {
    let count = count!(1, 2, 3, 4, 5);
    println!("Count: {}", count);
}
```

### 类型级宏

```rust
macro_rules! define_struct {
    ($name:ident { $($field:ident: $type:ty),* }) => {
        struct $name {
            $($field: $type),*
        }
    };
}

define_struct!(Person {
    name: String,
    age: u32,
    email: String
});

fn main() {
    let person = Person {
        name: "Alice".to_string(),
        age: 30,
        email: "alice@example.com".to_string(),
    };
    println!("Person: {} ({}), {}", person.name, person.age, person.email);
}
```

### 条件编译宏

```rust
macro_rules! debug_print {
    ($($arg:tt)*) => {
        #[cfg(debug_assertions)]
        {
            println!($($arg)*);
        }
    };
}

fn main() {
    debug_print!("Debug message");
    // 在release模式下不会打印
}
```

### 卫生宏示例

```rust
macro_rules! create_counter {
    () => {
        {
            let mut count = 0;
            move || {
                count += 1;
                count
            }
        }
    };
}

fn main() {
    let counter1 = create_counter!();
    let counter2 = create_counter!();
    
    println!("Counter1: {}", counter1());
    println!("Counter1: {}", counter1());
    println!("Counter2: {}", counter2());
}
```

### 复杂模式匹配

```rust
macro_rules! match_values {
    ($x:expr, $y:expr) => {
        match ($x, $y) {
            (a, b) if a == b => println!("Equal: {} == {}", a, b),
            (a, b) if a > b => println!("Greater: {} > {}", a, b),
            (a, b) => println!("Less: {} < {}", a, b),
        }
    };
}

fn main() {
    match_values!(5, 5);
    match_values!(10, 5);
    match_values!(3, 7);
}
```

### 错误处理宏

```rust
macro_rules! try_or_return {
    ($expr:expr) => {
        match $expr {
            Ok(val) => val,
            Err(e) => return Err(e),
        }
    };
}

fn process_data() -> Result<String, &'static str> {
    let data = try_or_return!(Ok("data".to_string()));
    let processed = try_or_return!(Ok(data + "_processed"));
    Ok(processed)
}

fn main() {
    match process_data() {
        Ok(result) => println!("Success: {}", result),
        Err(e) => println!("Error: {}", e),
    }
}
```

### 测试宏

```rust
macro_rules! test_cases {
    ($($name:ident: $input:expr => $expected:expr),*) => {
        $(
            #[test]
            fn $name() {
                let result = process_input($input);
                assert_eq!(result, $expected);
            }
        )*
    };
}

fn process_input(input: i32) -> i32 {
    input * 2
}

test_cases! {
    test_zero: 0 => 0,
    test_one: 1 => 2,
    test_negative: -5 => -10,
    test_large: 100 => 200
}
```

## 测试验证

```rust
#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn test_basic_macro() {
        // 测试基础宏展开
        let result = vector![1, 2, 3];
        assert_eq!(result, vec![1, 2, 3]);
    }
    
    #[test]
    fn test_count_macro() {
        // 测试递归宏
        assert_eq!(count!(), 0);
        assert_eq!(count!(1), 1);
        assert_eq!(count!(1, 2, 3), 3);
    }
    
    #[test]
    fn test_hygienic_macro() {
        // 测试卫生宏
        let counter1 = create_counter!();
        let counter2 = create_counter!();
        
        assert_eq!(counter1(), 1);
        assert_eq!(counter1(), 2);
        assert_eq!(counter2(), 1);
    }
    
    #[test]
    fn test_error_handling_macro() {
        // 测试错误处理宏
        let result = process_data();
        assert!(result.is_ok());
    }
}
```

## 形式化验证

### 宏展开验证

- 验证宏模式的正确匹配
- 检查重复模式的展开
- 确保递归宏的终止条件

### 卫生性验证

- 验证宏内部变量不与外部冲突
- 检查标识符的正确作用域
- 确保宏的独立性

### 类型安全验证

- 验证宏生成的代码类型正确
- 检查类型推断的一致性
- 确保编译时类型检查

## 性能考虑

1. **编译时展开**: 宏在编译时展开，无运行时开销
2. **代码生成**: 宏可能生成大量代码，影响编译时间
3. **调试困难**: 宏展开后的代码可能难以调试

## 最佳实践

1. **清晰的模式**: 使用清晰的模式匹配，避免歧义
2. **文档化**: 为复杂宏提供详细的文档和示例
3. **测试**: 为宏编写完整的测试用例
4. **卫生性**: 确保宏的卫生性，避免变量冲突
5. **性能**: 避免生成不必要的代码，优化宏展开
"

---

<!-- 以下为按标准模板自动补全的占位章节，待后续填充 -->
"
## 技术背景
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 核心概念
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 技术实现
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 形式化分析
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 应用案例
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 性能分析
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 常见问题
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 未来值展望
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n


