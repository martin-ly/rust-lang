# 桥接模式 (Bridge Pattern)

## 概述

桥接模式将抽象部分与实现部分分离，使它们都可以独立地变化。通过组合关系替代继承关系，实现抽象与实现的解耦。

## 数学定义

### 桥接关系

```text
BridgePattern(Abstraction, Implementation) = Abstraction.compose(Implementation) → DecoupledSystem
```

### 抽象与实现分离

```text
Separation(Abstraction, Implementation) = Abstraction ⊥ Implementation ∧ Abstraction ∘ Implementation
```

### 多维度变化

```text
MultiDimensionalVariation(Dimensions) = ∀d ∈ Dimensions. Abstraction(d) × Implementation(d)
```

### 组合优于继承

```text
CompositionOverInheritance(Abstraction, Implementation) = Abstraction.has_a(Implementation) ∧ ¬Abstraction.is_a(Implementation)
```

## 代码示例

### 基础桥接模式

```rust
// 实现接口
trait Implementation {
    fn operation_impl(&self) -> String;
}

// 具体实现A
struct ConcreteImplementationA;

impl Implementation for ConcreteImplementationA {
    fn operation_impl(&self) -> String {
        "ConcreteImplementationA: 具体实现A".to_string()
    }
}

// 具体实现B
struct ConcreteImplementationB;

impl Implementation for ConcreteImplementationB {
    fn operation_impl(&self) -> String {
        "ConcreteImplementationB: 具体实现B".to_string()
    }
}

// 抽象类
struct Abstraction {
    implementation: Box<dyn Implementation>,
}

impl Abstraction {
    fn new(implementation: Box<dyn Implementation>) -> Self {
        Abstraction { implementation }
    }
    
    fn operation(&self) -> String {
        format!("Abstraction: 调用实现\n{}", self.implementation.operation_impl())
    }
    
    fn set_implementation(&mut self, implementation: Box<dyn Implementation>) {
        self.implementation = implementation;
    }
}

// 扩展抽象
struct RefinedAbstraction {
    abstraction: Abstraction,
}

impl RefinedAbstraction {
    fn new(implementation: Box<dyn Implementation>) -> Self {
        RefinedAbstraction {
            abstraction: Abstraction::new(implementation),
        }
    }
    
    fn operation(&self) -> String {
        format!("RefinedAbstraction: 扩展操作\n{}", self.abstraction.operation())
    }
    
    fn set_implementation(&mut self, implementation: Box<dyn Implementation>) {
        self.abstraction.set_implementation(implementation);
    }
}

fn main() {
    let impl_a = Box::new(ConcreteImplementationA);
    let impl_b = Box::new(ConcreteImplementationB);
    
    let mut abstraction = Abstraction::new(impl_a);
    println!("{}", abstraction.operation());
    
    abstraction.set_implementation(impl_b);
    println!("{}", abstraction.operation());
    
    let mut refined = RefinedAbstraction::new(Box::new(ConcreteImplementationA));
    println!("{}", refined.operation());
}
```

### 多维度桥接模式

```rust
// 颜色维度
trait Color {
    fn get_color(&self) -> String;
}

struct Red;
struct Blue;
struct Green;

impl Color for Red {
    fn get_color(&self) -> String {
        "红色".to_string()
    }
}

impl Color for Blue {
    fn get_color(&self) -> String {
        "蓝色".to_string()
    }
}

impl Color for Green {
    fn get_color(&self) -> String {
        "绿色".to_string()
    }
}

// 形状维度
trait Shape {
    fn get_shape(&self) -> String;
}

struct Circle;
struct Square;
struct Triangle;

impl Shape for Circle {
    fn get_shape(&self) -> String {
        "圆形".to_string()
    }
}

impl Shape for Square {
    fn get_shape(&self) -> String {
        "方形".to_string()
    }
}

impl Shape for Triangle {
    fn get_shape(&self) -> String {
        "三角形".to_string()
    }
}

// 桥接抽象
struct BridgeShape<C: Color, S: Shape> {
    color: C,
    shape: S,
}

impl<C: Color, S: Shape> BridgeShape<C, S> {
    fn new(color: C, shape: S) -> Self {
        BridgeShape { color, shape }
    }
    
    fn describe(&self) -> String {
        format!("{}的{}", self.color.get_color(), self.shape.get_shape())
    }
}

fn main() {
    let red_circle = BridgeShape::new(Red, Circle);
    let blue_square = BridgeShape::new(Blue, Square);
    let green_triangle = BridgeShape::new(Green, Triangle);
    
    println!("{}", red_circle.describe());
    println!("{}", blue_square.describe());
    println!("{}", green_triangle.describe());
}
```

### 泛型桥接模式

```rust
// 泛型实现接口
trait GenericImplementation<T> {
    fn process(&self, data: T) -> T;
}

// 泛型具体实现
struct GenericConcreteImplementation<T> {
    _phantom: std::marker::PhantomData<T>,
}

impl<T> GenericConcreteImplementation<T> {
    fn new() -> Self {
        GenericConcreteImplementation {
            _phantom: std::marker::PhantomData,
        }
    }
}

impl<T: Clone> GenericImplementation<T> for GenericConcreteImplementation<T> {
    fn process(&self, data: T) -> T {
        // 处理逻辑
        data
    }
}

// 泛型抽象
struct GenericAbstraction<T, I: GenericImplementation<T>> {
    implementation: I,
    _phantom: std::marker::PhantomData<T>,
}

impl<T, I: GenericImplementation<T>> GenericAbstraction<T, I> {
    fn new(implementation: I) -> Self {
        GenericAbstraction {
            implementation,
            _phantom: std::marker::PhantomData,
        }
    }
    
    fn operation(&self, data: T) -> T {
        self.implementation.process(data)
    }
}

fn main() {
    let impl_string = GenericConcreteImplementation::<String>::new();
    let impl_number = GenericConcreteImplementation::<i32>::new();
    
    let abstraction_string = GenericAbstraction::new(impl_string);
    let abstraction_number = GenericAbstraction::new(impl_number);
    
    let result_string = abstraction_string.operation("hello".to_string());
    let result_number = abstraction_number.operation(42);
    
    println!("字符串结果: {}", result_string);
    println!("数字结果: {}", result_number);
}
```

### 异步桥接模式

```rust
use async_trait::async_trait;

#[async_trait]
trait AsyncImplementation {
    async fn async_operation(&self) -> String;
}

struct AsyncConcreteImplementationA;

#[async_trait]
impl AsyncImplementation for AsyncConcreteImplementationA {
    async fn async_operation(&self) -> String {
        tokio::time::sleep(tokio::time::Duration::from_millis(100)).await;
        "AsyncImplementationA: 异步操作A".to_string()
    }
}

struct AsyncConcreteImplementationB;

#[async_trait]
impl AsyncImplementation for AsyncConcreteImplementationB {
    async fn async_operation(&self) -> String {
        tokio::time::sleep(tokio::time::Duration::from_millis(50)).await;
        "AsyncImplementationB: 异步操作B".to_string()
    }
}

struct AsyncAbstraction {
    implementation: Box<dyn AsyncImplementation + Send + Sync>,
}

impl AsyncAbstraction {
    fn new(implementation: Box<dyn AsyncImplementation + Send + Sync>) -> Self {
        AsyncAbstraction { implementation }
    }
    
    async fn operation(&self) -> String {
        format!("AsyncAbstraction: 调用异步实现\n{}", self.implementation.async_operation().await)
    }
    
    fn set_implementation(&mut self, implementation: Box<dyn AsyncImplementation + Send + Sync>) {
        self.implementation = implementation;
    }
}

#[tokio::main]
async fn main() {
    let impl_a = Box::new(AsyncConcreteImplementationA);
    let impl_b = Box::new(AsyncConcreteImplementationB);
    
    let mut abstraction = AsyncAbstraction::new(impl_a);
    println!("{}", abstraction.operation().await);
    
    abstraction.set_implementation(impl_b);
    println!("{}", abstraction.operation().await);
}
```

### 配置化桥接模式

```rust
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

#[derive(Debug, Clone, Serialize, Deserialize)]
struct BridgeConfig {
    implementation_type: String,
    parameters: HashMap<String, String>,
}

impl Default for BridgeConfig {
    fn default() -> Self {
        let mut parameters = HashMap::new();
        parameters.insert("param1".to_string(), "value1".to_string());
        parameters.insert("param2".to_string(), "value2".to_string());
        
        BridgeConfig {
            implementation_type: "default".to_string(),
            parameters,
        }
    }
}

// 配置化实现
trait ConfigurableImplementation {
    fn configure(&mut self, config: &BridgeConfig);
    fn operation(&self) -> String;
}

struct ConfigurableConcreteImplementation {
    config: BridgeConfig,
}

impl ConfigurableConcreteImplementation {
    fn new() -> Self {
        ConfigurableConcreteImplementation {
            config: BridgeConfig::default(),
        }
    }
}

impl ConfigurableImplementation for ConfigurableConcreteImplementation {
    fn configure(&mut self, config: &BridgeConfig) {
        self.config = config.clone();
    }
    
    fn operation(&self) -> String {
        format!("ConfigurableImplementation: type={}, params={:?}", 
            self.config.implementation_type, self.config.parameters)
    }
}

// 配置化抽象
struct ConfigurableAbstraction {
    implementation: Box<dyn ConfigurableImplementation>,
}

impl ConfigurableAbstraction {
    fn new(implementation: Box<dyn ConfigurableImplementation>) -> Self {
        ConfigurableAbstraction { implementation }
    }
    
    fn configure(&mut self, config: BridgeConfig) {
        self.implementation.configure(&config);
    }
    
    fn operation(&self) -> String {
        format!("ConfigurableAbstraction: 调用配置化实现\n{}", self.implementation.operation())
    }
}

fn main() {
    let mut abstraction = ConfigurableAbstraction::new(
        Box::new(ConfigurableConcreteImplementation::new())
    );
    
    println!("默认配置: {}", abstraction.operation());
    
    let mut custom_config = BridgeConfig::default();
    custom_config.implementation_type = "custom".to_string();
    custom_config.parameters.insert("custom_param".to_string(), "custom_value".to_string());
    
    abstraction.configure(custom_config);
    println!("自定义配置: {}", abstraction.operation());
}
```

### 状态桥接模式

```rust
// 状态实现接口
trait State {
    fn handle(&self) -> String;
    fn next_state(&self) -> Option<Box<dyn State>>;
}

// 具体状态
struct StateA;

impl State for StateA {
    fn handle(&self) -> String {
        "StateA: 处理状态A".to_string()
    }
    
    fn next_state(&self) -> Option<Box<dyn State>> {
        Some(Box::new(StateB))
    }
}

struct StateB;

impl State for StateB {
    fn handle(&self) -> String {
        "StateB: 处理状态B".to_string()
    }
    
    fn next_state(&self) -> Option<Box<dyn State>> {
        Some(Box::new(StateC))
    }
}

struct StateC;

impl State for StateC {
    fn handle(&self) -> String {
        "StateC: 处理状态C".to_string()
    }
    
    fn next_state(&self) -> Option<Box<dyn State>> {
        None // 结束状态
    }
}

// 状态桥接抽象
struct StateBridge {
    state: Box<dyn State>,
}

impl StateBridge {
    fn new(state: Box<dyn State>) -> Self {
        StateBridge { state }
    }
    
    fn operation(&self) -> String {
        format!("StateBridge: 当前状态\n{}", self.state.handle())
    }
    
    fn transition(&mut self) {
        if let Some(next_state) = self.state.next_state() {
            self.state = next_state;
        }
    }
}

fn main() {
    let mut bridge = StateBridge::new(Box::new(StateA));
    
    println!("{}", bridge.operation());
    bridge.transition();
    println!("{}", bridge.operation());
    bridge.transition();
    println!("{}", bridge.operation());
    bridge.transition();
    println!("{}", bridge.operation());
}
```

## 测试验证

```rust
#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn test_basic_bridge() {
        let impl_a = Box::new(ConcreteImplementationA);
        let abstraction = Abstraction::new(impl_a);
        
        let result = abstraction.operation();
        assert!(result.contains("ConcreteImplementationA"));
    }
    
    #[test]
    fn test_multi_dimensional_bridge() {
        let red_circle = BridgeShape::new(Red, Circle);
        let result = red_circle.describe();
        assert!(result.contains("红色"));
        assert!(result.contains("圆形"));
    }
    
    #[test]
    fn test_generic_bridge() {
        let impl_string = GenericConcreteImplementation::<String>::new();
        let abstraction = GenericAbstraction::new(impl_string);
        
        let result = abstraction.operation("test".to_string());
        assert_eq!(result, "test");
    }
    
    #[test]
    fn test_configurable_bridge() {
        let mut abstraction = ConfigurableAbstraction::new(
            Box::new(ConfigurableConcreteImplementation::new())
        );
        
        let result = abstraction.operation();
        assert!(result.contains("default"));
    }
    
    #[test]
    fn test_state_bridge() {
        let bridge = StateBridge::new(Box::new(StateA));
        let result = bridge.operation();
        assert!(result.contains("StateA"));
    }
    
    #[tokio::test]
    async fn test_async_bridge() {
        let impl_a = Box::new(AsyncConcreteImplementationA);
        let abstraction = AsyncAbstraction::new(impl_a);
        
        let result = abstraction.operation().await;
        assert!(result.contains("AsyncImplementationA"));
    }
}
```

## 形式化验证

- 验证抽象与实现的分离正确性
- 检查桥接模式的解耦效果
- 验证多维度变化的独立性
- 检查泛型桥接的类型安全
- 验证异步桥接的并发安全
- 检查配置化桥接的灵活性
- 验证状态桥接的状态转换正确性

## 性能与最佳实践

1. **解耦设计**: 桥接模式实现抽象与实现的解耦
2. **扩展性**: 支持多维度独立变化
3. **类型安全**: 泛型桥接确保类型安全
4. **异步支持**: 异步桥接适应现代场景
5. **配置化**: 配置化桥接提升灵活性
"

---

<!-- 以下为按标准模板自动补全的占位章节，待后续填充 -->
"
## 技术背景
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 核心概念
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 技术实现
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 形式化分析
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 应用案例
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 性能分析
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 常见问题
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 未来值展望
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n


