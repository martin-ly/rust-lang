name: Rust形式化理论体系统一化与实用化 CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # 代码质量检查
  quality-check:
    name: 代码质量检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 安装Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          
      - name: 缓存依赖
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: 代码格式检查
        run: |
          cargo fmt --all -- --check
          
      - name: Clippy检查
        run: |
          cargo clippy --all-targets --all-features -- -D warnings
          
      - name: 安全检查
        run: |
          cargo audit --deny warnings

  # 单元测试
  unit-tests:
    name: 单元测试
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        target: [x86_64-unknown-linux-gnu]
        
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 安装Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true
          
      - name: 缓存依赖
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          
      - name: 运行单元测试
        run: |
          cargo test --all-targets --all-features --verbose
          
      - name: 生成测试覆盖率报告
        if: matrix.rust == 'stable'
        run: |
          cargo install cargo-tarpaulin
          cargo tarpaulin --all-features --out Html --output-dir coverage
          
      - name: 上传覆盖率报告
        if: matrix.rust == 'stable'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/

  # 集成测试
  integration-tests:
    name: 集成测试
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 安装Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          
      - name: 缓存依赖
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: 运行集成测试
        run: |
          cargo test --test '*' --all-features --verbose
          
      - name: 运行工具链测试
        run: |
          cd tools
          cargo test --all-features --verbose
          
      - name: 验证文档一致性
        run: |
          cargo run --bin integration_runner -- symbol --path . --output json
          cargo run --bin integration_runner -- concept --path . --output json
          cargo run --bin integration_runner -- hierarchy --path . --output json

  # 性能测试
  performance-tests:
    name: 性能测试
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 安装Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          
      - name: 缓存依赖
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: 运行性能测试
        run: |
          cargo bench --all-features
          
      - name: 内存使用测试
        run: |
          cargo test --test memory_tests --all-features
          
      - name: 并发安全测试
        run: |
          cargo test --test concurrency_tests --all-features

  # 文档构建
  documentation:
    name: 文档构建
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 安装Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          
      - name: 缓存依赖
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: 构建文档
        run: |
          cargo doc --all-features --no-deps
          
      - name: 验证文档链接
        run: |
          cargo install cargo-deadlinks
          cargo deadlinks
          
      - name: 上传文档
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: target/doc/

  # 跨平台测试
  cross-platform:
    name: 跨平台测试
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        target: [x86_64-unknown-linux-gnu, x86_64-pc-windows-msvc, x86_64-apple-darwin]
        
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 安装Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
          
      - name: 缓存依赖
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          
      - name: 构建项目
        run: |
          cargo build --all-targets --all-features --verbose
          
      - name: 运行测试
        run: |
          cargo test --all-targets --all-features --verbose

  # 安全扫描
  security-scan:
    name: 安全扫描
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 安装Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          
      - name: 缓存依赖
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: 运行安全审计
        run: |
          cargo audit --deny warnings
          
      - name: 运行Cargo-geiger
        run: |
          cargo install cargo-geiger
          cargo geiger --all-features
          
      - name: 检查依赖许可证
        run: |
          cargo install cargo-license
          cargo license --json > licenses.json
          
      - name: 上传许可证报告
        uses: actions/upload-artifact@v3
        with:
          name: licenses
          path: licenses.json

  # 发布准备
  release-prep:
    name: 发布准备
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, documentation, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 安装Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          
      - name: 缓存依赖
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: 构建发布版本
        run: |
          cargo build --release --all-targets --all-features
          
      - name: 运行最终测试
        run: |
          cargo test --release --all-targets --all-features
          
      - name: 生成发布包
        run: |
          cargo package --allow-dirty
          
      - name: 上传发布包
        uses: actions/upload-artifact@v3
        with:
          name: release-package
          path: target/package/

  # 质量门禁
  quality-gate:
    name: 质量门禁
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, security-scan]
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 安装Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          
      - name: 缓存依赖
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: 运行质量检查
        run: |
          # 检查测试覆盖率
          cargo install cargo-tarpaulin
          cargo tarpaulin --all-features --out Json --output-dir coverage
          
          # 检查代码复杂度
          cargo install cargo-complexity
          cargo complexity --all-features
          
          # 检查文档完整性
          cargo doc --all-features --no-deps
          
      - name: 生成质量报告
        run: |
          echo "质量门禁检查完成" > quality-report.txt
          echo "测试覆盖率: $(cat coverage/tarpaulin-report.json | jq -r '.coverage')" >> quality-report.txt
          echo "代码复杂度: 通过" >> quality-report.txt
          echo "文档完整性: 通过" >> quality-report.txt
          
      - name: 上传质量报告
        uses: actions/upload-artifact@v3
        with:
          name: quality-report
          path: quality-report.txt

  # 通知
  notify:
    name: 通知
    runs-on: ubuntu-latest
    needs: [quality-gate, release-prep]
    if: always()
    
    steps:
      - name: 检查工作流状态
        id: check_status
        run: |
          if [[ "${{ needs.quality-gate.result }}" == "success" && "${{ needs.release-prep.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi
          
      - name: 发送成功通知
        if: steps.check_status.outputs.status == 'success'
        run: |
          echo "所有检查通过，项目质量良好"
          
      - name: 发送失败通知
        if: steps.check_status.outputs.status == 'failure'
        run: |
          echo "部分检查失败，需要修复问题"
          exit 1 