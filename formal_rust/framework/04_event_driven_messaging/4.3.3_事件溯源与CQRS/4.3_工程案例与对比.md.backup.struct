# 事件溯源与CQRS - 工程案例与对比

## 实际工程案例

### 案例1: 电商订单系统

#### 系统架构

```text
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   订单服务       │    │   库存服务      │    │   支付服务       │
│                 │    │                 │    │                 │
│ - 订单创建       │    │ - 库存检查      │    │ - 支付处理       │
│ - 订单状态管理   │    │ - 库存锁定      │    │ - 退款处理       │
│ - 订单取消       │    │ - 库存释放      │    │ - 支付状态查询   │
└─────────────────┘    └─────────────────┘    └─────────────────┘
           │                       │                       │
           │                       │                       │
           ▼                       ▼                       ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   事件存储       │    │   查询模型      │    │   通知服务       │
│                 │    │                 │    │                 │
│ - 订单事件       │    │ - 订单视图      │    │ - 邮件通知       │
│ - 库存事件       │    │ - 库存视图      │    │ - 短信通知       │
│ - 支付事件       │    │ - 支付视图      │    │ - 推送通知       │
└─────────────────┘    └─────────────────┘    └─────────────────┘
```

#### 订单聚合根实现

```rust
#[derive(Debug, Clone)]
pub struct Order {
    pub id: String,
    pub customer_id: String,
    pub items: Vec<OrderItem>,
    pub status: OrderStatus,
    pub total_amount: Decimal,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
    pub version: u64,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum OrderEvent {
    OrderCreated {
        id: String,
        customer_id: String,
        items: Vec<OrderItem>,
        total_amount: Decimal,
    },
    OrderConfirmed,
    OrderCancelled {
        reason: String,
    },
    OrderShipped {
        tracking_number: String,
    },
    OrderDelivered,
    OrderItemAdded {
        item: OrderItem,
    },
    OrderItemRemoved {
        item_id: String,
    },
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum OrderCommand {
    CreateOrder {
        customer_id: String,
        items: Vec<OrderItem>,
    },
    ConfirmOrder,
    CancelOrder {
        reason: String,
    },
    ShipOrder {
        tracking_number: String,
    },
    DeliverOrder,
    AddItem {
        item: OrderItem,
    },
    RemoveItem {
        item_id: String,
    },
}

#[async_trait]
impl Aggregate for Order {
    type Event = OrderEvent;
    type Command = OrderCommand;
    type Error = OrderError;
    
    fn aggregate_id(&self) -> &str {
        &self.id
    }
    
    fn version(&self) -> u64 {
        self.version
    }
    
    async fn handle_command(
        &mut self,
        command: Self::Command,
    ) -> Result<Vec<Self::Event>, Self::Error> {
        match command {
            OrderCommand::CreateOrder { customer_id, items } => {
                if self.id.is_empty() {
                    let total_amount = items.iter().map(|item| item.price * item.quantity).sum();
                    Ok(vec![OrderEvent::OrderCreated {
                        id: Uuid::new_v4().to_string(),
                        customer_id,
                        items,
                        total_amount,
                    }])
                } else {
                    Err(OrderError::OrderAlreadyExists)
                }
            }
            OrderCommand::ConfirmOrder => {
                if self.status == OrderStatus::Pending {
                    Ok(vec![OrderEvent::OrderConfirmed])
                } else {
                    Err(OrderError::InvalidOrderStatus)
                }
            }
            OrderCommand::CancelOrder { reason } => {
                if self.status != OrderStatus::Delivered {
                    Ok(vec![OrderEvent::OrderCancelled { reason }])
                } else {
                    Err(OrderError::CannotCancelDeliveredOrder)
                }
            }
            OrderCommand::ShipOrder { tracking_number } => {
                if self.status == OrderStatus::Confirmed {
                    Ok(vec![OrderEvent::OrderShipped { tracking_number }])
                } else {
                    Err(OrderError::InvalidOrderStatus)
                }
            }
            OrderCommand::DeliverOrder => {
                if self.status == OrderStatus::Shipped {
                    Ok(vec![OrderEvent::OrderDelivered])
                } else {
                    Err(OrderError::InvalidOrderStatus)
                }
            }
            OrderCommand::AddItem { item } => {
                if self.status == OrderStatus::Pending {
                    Ok(vec![OrderEvent::OrderItemAdded { item }])
                } else {
                    Err(OrderError::CannotModifyConfirmedOrder)
                }
            }
            OrderCommand::RemoveItem { item_id } => {
                if self.status == OrderStatus::Pending {
                    Ok(vec![OrderEvent::OrderItemRemoved { item_id }])
                } else {
                    Err(OrderError::CannotModifyConfirmedOrder)
                }
            }
        }
    }
    
    fn apply_event(&mut self, event: &Self::Event) -> Result<(), Self::Error> {
        match event {
            OrderEvent::OrderCreated { id, customer_id, items, total_amount } => {
                self.id = id.clone();
                self.customer_id = customer_id.clone();
                self.items = items.clone();
                self.total_amount = *total_amount;
                self.status = OrderStatus::Pending;
                self.created_at = Utc::now();
                self.updated_at = Utc::now();
                self.version += 1;
            }
            OrderEvent::OrderConfirmed => {
                self.status = OrderStatus::Confirmed;
                self.updated_at = Utc::now();
                self.version += 1;
            }
            OrderEvent::OrderCancelled { .. } => {
                self.status = OrderStatus::Cancelled;
                self.updated_at = Utc::now();
                self.version += 1;
            }
            OrderEvent::OrderShipped { .. } => {
                self.status = OrderStatus::Shipped;
                self.updated_at = Utc::now();
                self.version += 1;
            }
            OrderEvent::OrderDelivered => {
                self.status = OrderStatus::Delivered;
                self.updated_at = Utc::now();
                self.version += 1;
            }
            OrderEvent::OrderItemAdded { item } => {
                self.items.push(item.clone());
                self.total_amount = self.items.iter().map(|item| item.price * item.quantity).sum();
                self.updated_at = Utc::now();
                self.version += 1;
            }
            OrderEvent::OrderItemRemoved { item_id } => {
                self.items.retain(|item| item.id != *item_id);
                self.total_amount = self.items.iter().map(|item| item.price * item.quantity).sum();
                self.updated_at = Utc::now();
                self.version += 1;
            }
        }
        Ok(())
    }
    
    fn load_from_events(events: Vec<Self::Event>) -> Result<Self, Self::Error> {
        let mut order = Order {
            id: String::new(),
            customer_id: String::new(),
            items: Vec::new(),
            status: OrderStatus::Pending,
            total_amount: Decimal::ZERO,
            created_at: Utc::now(),
            updated_at: Utc::now(),
            version: 0,
        };
        
        for event in events {
            order.apply_event(&event)?;
        }
        
        Ok(order)
    }
}
```

#### 查询模型实现

```rust
pub struct OrderQueryModel {
    pool: PgPool,
}

impl OrderQueryModel {
    pub fn new(pool: PgPool) -> Self {
        Self { pool }
    }
    
    pub async fn get_order(&self, id: &str) -> Result<Option<OrderView>, QueryError> {
        let row = sqlx::query!(
            "SELECT o.id, o.customer_id, o.status, o.total_amount, 
                    o.created_at, o.updated_at,
                    c.name as customer_name, c.email as customer_email
             FROM orders o
             JOIN customers c ON o.customer_id = c.id
             WHERE o.id = $1",
            id
        )
        .fetch_optional(&self.pool)
        .await?;
        
        if let Some(row) = row {
            let items = self.get_order_items(id).await?;
            
            Ok(Some(OrderView {
                id: row.id,
                customer_id: row.customer_id,
                customer_name: row.customer_name,
                customer_email: row.customer_email,
                items,
                status: row.status,
                total_amount: row.total_amount,
                created_at: row.created_at,
                updated_at: row.updated_at,
            }))
        } else {
            Ok(None)
        }
    }
    
    pub async fn get_customer_orders(
        &self,
        customer_id: &str,
        page: i64,
        page_size: i64,
    ) -> Result<Vec<OrderView>, QueryError> {
        let offset = (page - 1) * page_size;
        
        let rows = sqlx::query!(
            "SELECT o.id, o.customer_id, o.status, o.total_amount, 
                    o.created_at, o.updated_at,
                    c.name as customer_name, c.email as customer_email
             FROM orders o
             JOIN customers c ON o.customer_id = c.id
             WHERE o.customer_id = $1
             ORDER BY o.created_at DESC
             LIMIT $2 OFFSET $3",
            customer_id,
            page_size,
            offset
        )
        .fetch_all(&self.pool)
        .await?;
        
        let mut orders = Vec::new();
        for row in rows {
            let items = self.get_order_items(&row.id).await?;
            
            orders.push(OrderView {
                id: row.id,
                customer_id: row.customer_id,
                customer_name: row.customer_name,
                customer_email: row.customer_email,
                items,
                status: row.status,
                total_amount: row.total_amount,
                created_at: row.created_at,
                updated_at: row.updated_at,
            });
        }
        
        Ok(orders)
    }
    
    async fn get_order_items(&self, order_id: &str) -> Result<Vec<OrderItemView>, QueryError> {
        let rows = sqlx::query!(
            "SELECT oi.id, oi.product_id, oi.quantity, oi.price,
                    p.name as product_name, p.description as product_description
             FROM order_items oi
             JOIN products p ON oi.product_id = p.id
             WHERE oi.order_id = $1",
            order_id
        )
        .fetch_all(&self.pool)
        .await?;
        
        Ok(rows
            .into_iter()
            .map(|row| OrderItemView {
                id: row.id,
                product_id: row.product_id,
                product_name: row.product_name,
                product_description: row.product_description,
                quantity: row.quantity,
                price: row.price,
            })
            .collect())
    }
}

#[derive(Debug, Clone, Serialize)]
pub struct OrderView {
    pub id: String,
    pub customer_id: String,
    pub customer_name: String,
    pub customer_email: String,
    pub items: Vec<OrderItemView>,
    pub status: String,
    pub total_amount: Decimal,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Debug, Clone, Serialize)]
pub struct OrderItemView {
    pub id: String,
    pub product_id: String,
    pub product_name: String,
    pub product_description: Option<String>,
    pub quantity: i32,
    pub price: Decimal,
}
```

### 案例2: 银行账户系统

#### 系统架构1

```text
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   账户服务       │    │   交易服务      │    │   风控服务      │
│                 │    │                 │    │                 │
│ - 账户创建       │    │ - 转账处理      │    │ - 风险评估      │
│ - 账户状态管理   │    │ - 存款处理      │    │ - 异常检测      │
│ - 账户冻结       │    │ - 取款处理      │    │ - 限额控制      │
└─────────────────┘    └─────────────────┘    └─────────────────┘
           │                       │                       │
           │                       │                       │
           ▼                       ▼                       ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   事件存储       │    │   查询模型      │    │   报表服务      │
│                 │    │                 │    │                 │
│ - 账户事件       │    │ - 账户视图      │    │ - 交易报表      │
│ - 交易事件       │    │ - 交易视图      │    │ - 余额报表      │
│ - 风控事件       │    │ - 风控视图      │    │ - 风险报表      │
└─────────────────┘    └─────────────────┘    └─────────────────┘
```

#### 账户聚合根实现

```rust
#[derive(Debug, Clone)]
pub struct Account {
    pub id: String,
    pub customer_id: String,
    pub account_type: AccountType,
    pub balance: Decimal,
    pub currency: String,
    pub status: AccountStatus,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
    pub version: u64,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum AccountEvent {
    AccountCreated {
        id: String,
        customer_id: String,
        account_type: AccountType,
        currency: String,
    },
    AccountActivated,
    AccountSuspended {
        reason: String,
    },
    AccountClosed {
        reason: String,
    },
    MoneyDeposited {
        amount: Decimal,
        transaction_id: String,
    },
    MoneyWithdrawn {
        amount: Decimal,
        transaction_id: String,
    },
    TransferIn {
        amount: Decimal,
        from_account: String,
        transaction_id: String,
    },
    TransferOut {
        amount: Decimal,
        to_account: String,
        transaction_id: String,
    },
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum AccountCommand {
    CreateAccount {
        customer_id: String,
        account_type: AccountType,
        currency: String,
    },
    ActivateAccount,
    SuspendAccount {
        reason: String,
    },
    CloseAccount {
        reason: String,
    },
    DepositMoney {
        amount: Decimal,
        transaction_id: String,
    },
    WithdrawMoney {
        amount: Decimal,
        transaction_id: String,
    },
    TransferMoney {
        amount: Decimal,
        to_account: String,
        transaction_id: String,
    },
}

#[async_trait]
impl Aggregate for Account {
    type Event = AccountEvent;
    type Command = AccountCommand;
    type Error = AccountError;
    
    fn aggregate_id(&self) -> &str {
        &self.id
    }
    
    fn version(&self) -> u64 {
        self.version
    }
    
    async fn handle_command(
        &mut self,
        command: Self::Command,
    ) -> Result<Vec<Self::Event>, Self::Error> {
        match command {
            AccountCommand::CreateAccount { customer_id, account_type, currency } => {
                if self.id.is_empty() {
                    Ok(vec![AccountEvent::AccountCreated {
                        id: Uuid::new_v4().to_string(),
                        customer_id,
                        account_type,
                        currency,
                    }])
                } else {
                    Err(AccountError::AccountAlreadyExists)
                }
            }
            AccountCommand::ActivateAccount => {
                if self.status == AccountStatus::Pending {
                    Ok(vec![AccountEvent::AccountActivated])
                } else {
                    Err(AccountError::InvalidAccountStatus)
                }
            }
            AccountCommand::SuspendAccount { reason } => {
                if self.status == AccountStatus::Active {
                    Ok(vec![AccountEvent::AccountSuspended { reason }])
                } else {
                    Err(AccountError::InvalidAccountStatus)
                }
            }
            AccountCommand::CloseAccount { reason } => {
                if self.status != AccountStatus::Closed {
                    Ok(vec![AccountEvent::AccountClosed { reason }])
                } else {
                    Err(AccountError::AccountAlreadyClosed)
                }
            }
            AccountCommand::DepositMoney { amount, transaction_id } => {
                if self.status == AccountStatus::Active && amount > Decimal::ZERO {
                    Ok(vec![AccountEvent::MoneyDeposited { amount, transaction_id }])
                } else {
                    Err(AccountError::InvalidDeposit)
                }
            }
            AccountCommand::WithdrawMoney { amount, transaction_id } => {
                if self.status == AccountStatus::Active 
                   && amount > Decimal::ZERO 
                   && self.balance >= amount {
                    Ok(vec![AccountEvent::MoneyWithdrawn { amount, transaction_id }])
                } else {
                    Err(AccountError::InsufficientFunds)
                }
            }
            AccountCommand::TransferMoney { amount, to_account, transaction_id } => {
                if self.status == AccountStatus::Active 
                   && amount > Decimal::ZERO 
                   && self.balance >= amount {
                    Ok(vec![AccountEvent::TransferOut { amount, to_account, transaction_id }])
                } else {
                    Err(AccountError::InsufficientFunds)
                }
            }
        }
    }
    
    fn apply_event(&mut self, event: &Self::Event) -> Result<(), Self::Error> {
        match event {
            AccountEvent::AccountCreated { id, customer_id, account_type, currency } => {
                self.id = id.clone();
                self.customer_id = customer_id.clone();
                self.account_type = account_type.clone();
                self.currency = currency.clone();
                self.balance = Decimal::ZERO;
                self.status = AccountStatus::Pending;
                self.created_at = Utc::now();
                self.updated_at = Utc::now();
                self.version += 1;
            }
            AccountEvent::AccountActivated => {
                self.status = AccountStatus::Active;
                self.updated_at = Utc::now();
                self.version += 1;
            }
            AccountEvent::AccountSuspended { .. } => {
                self.status = AccountStatus::Suspended;
                self.updated_at = Utc::now();
                self.version += 1;
            }
            AccountEvent::AccountClosed { .. } => {
                self.status = AccountStatus::Closed;
                self.updated_at = Utc::now();
                self.version += 1;
            }
            AccountEvent::MoneyDeposited { amount, .. } => {
                self.balance += amount;
                self.updated_at = Utc::now();
                self.version += 1;
            }
            AccountEvent::MoneyWithdrawn { amount, .. } => {
                self.balance -= amount;
                self.updated_at = Utc::now();
                self.version += 1;
            }
            AccountEvent::TransferIn { amount, .. } => {
                self.balance += amount;
                self.updated_at = Utc::now();
                self.version += 1;
            }
            AccountEvent::TransferOut { amount, .. } => {
                self.balance -= amount;
                self.updated_at = Utc::now();
                self.version += 1;
            }
        }
        Ok(())
    }
    
    fn load_from_events(events: Vec<Self::Event>) -> Result<Self, Self::Error> {
        let mut account = Account {
            id: String::new(),
            customer_id: String::new(),
            account_type: AccountType::Savings,
            balance: Decimal::ZERO,
            currency: String::new(),
            status: AccountStatus::Pending,
            created_at: Utc::now(),
            updated_at: Utc::now(),
            version: 0,
        };
        
        for event in events {
            account.apply_event(&event)?;
        }
        
        Ok(account)
    }
}
```

## 技术对比分析

### 事件溯源 vs 传统CRUD

| 方面 | 事件溯源 | 传统CRUD |
|------|----------|----------|
| **数据完整性** | 完整的历史记录，支持审计 | 只保留当前状态，历史信息有限 |
| **性能** | 写操作性能好，读操作需要重放 | 读写性能相对均衡 |
| **复杂性** | 架构复杂，学习曲线陡峭 | 架构简单，易于理解 |
| **可扩展性** | 支持水平扩展，易于分片 | 扩展性受限于数据库设计 |
| **一致性** | 最终一致性，支持分布式 | 强一致性，适合单体应用 |
| **调试能力** | 完整的事件历史便于调试 | 调试信息有限 |

### CQRS vs 传统架构

| 方面 | CQRS | 传统架构 |
|------|------|----------|
| **模型设计** | 读写分离，针对不同需求优化 | 统一模型，兼顾读写需求 |
| **性能** | 查询性能优秀，写操作独立优化 | 性能相对均衡 |
| **复杂性** | 架构复杂，需要维护多个模型 | 架构简单，易于维护 |
| **一致性** | 最终一致性，支持高可用 | 强一致性，适合事务性应用 |
| **扩展性** | 读写操作可独立扩展 | 整体扩展，受限于瓶颈 |
| **开发效率** | 开发周期长，需要更多技能 | 开发效率高，技能要求低 |

### 不同事件存储方案对比

| 方案 | 优点 | 缺点 | 适用场景 |
|------|------|------|----------|
| **PostgreSQL** | 事务支持好，SQL查询强大 | 事件流处理能力有限 | 中小型应用 |
| **EventStoreDB** | 专为事件溯源设计，性能优秀 | 生态系统相对较小 | 大型事件溯源应用 |
| **Apache Kafka** | 高吞吐量，分布式能力强 | 事件存储功能有限 | 流处理和大数据 |
| **Redis** | 内存存储，性能极高 | 持久化能力有限 | 缓存和临时存储 |
| **MongoDB** | 文档存储，灵活性好 | 事务支持有限 | 文档型事件存储 |

### 不同查询模型方案对比

| 方案 | 优点 | 缺点 | 适用场景 |
|------|------|------|----------|
| **PostgreSQL** | SQL查询强大，事务支持好 | 扩展性有限 | 关系型查询 |
| **Elasticsearch** | 全文搜索，聚合查询强大 | 数据一致性有限 | 搜索和分析 |
| **Redis** | 内存存储，查询性能极高 | 存储容量有限 | 缓存和实时查询 |
| **ClickHouse** | 列式存储，分析查询优秀 | 事务支持有限 | 大数据分析 |
| **GraphQL** | 灵活的查询接口，类型安全 | 学习曲线陡峭 | API查询层 |

## 性能基准测试

### 事件存储性能对比

```rust
#[tokio::test]
async fn event_store_performance_test() {
    let test_cases = vec![
        ("PostgreSQL", create_postgres_event_store()),
        ("EventStoreDB", create_eventstore_event_store()),
        ("Kafka", create_kafka_event_store()),
    ];
    
    for (name, event_store) in test_cases {
        let start = Instant::now();
        
        // 写入1000个事件
        for i in 0..1000 {
            let event = create_test_event(i);
            event_store.append_events("test_aggregate", i, vec![event]).await.unwrap();
        }
        
        let write_time = start.elapsed();
        
        // 读取所有事件
        let start = Instant::now();
        let events = event_store.get_events("test_aggregate", 0).await.unwrap();
        let read_time = start.elapsed();
        
        println!("{}: Write: {:?}, Read: {:?}, Events: {}", 
                name, write_time, read_time, events.len());
    }
}
```

### 查询模型性能对比

```rust
#[tokio::test]
async fn query_model_performance_test() {
    let test_cases = vec![
        ("PostgreSQL", create_postgres_query_model()),
        ("Elasticsearch", create_elasticsearch_query_model()),
        ("Redis", create_redis_query_model()),
    ];
    
    for (name, query_model) in test_cases {
        let start = Instant::now();
        
        // 复杂查询测试
        for _ in 0..100 {
            let results = query_model.search_orders("test", 1, 20).await.unwrap();
        }
        
        let query_time = start.elapsed();
        
        println!("{}: Query time: {:?}", name, query_time);
    }
}
```

## 最佳实践总结

### 事件设计最佳实践

1. **事件命名规范**
   - 使用过去时态描述已发生的事实
   - 事件名称应该清晰表达业务含义
   - 避免在事件名称中包含技术细节

2. **事件数据结构体**
   - 包含足够的信息以重建状态
   - 避免在事件中包含计算字段
   - 使用不可变的数据结构体

3. **事件版本控制**
   - 为事件结构体变化制定版本策略
   - 提供事件升级和降级机制
   - 保持向后兼容性

### CQRS设计最佳实践

1. **模型分离原则**
   - 命令模型专注于业务逻辑
   - 查询模型专注于用户体验
   - 避免在查询模型中包含业务逻辑

2. **一致性保证**
   - 使用最终一致性而非强一致性
   - 通过事件同步确保数据一致性
   - 提供补偿机制处理不一致

3. **性能优化策略**
   - 为查询模型使用专门的存储
   - 实现适当的缓存策略
   - 使用异步处理减少延迟


