# 事件溯源与CQRS - 常见问题与误区

## 常见问题

### 1. 事件版本管理问题

#### 1.1 问题描述

随着业务发展，事件结构体需要演进，如何保证向后兼容性和数据一致性成为关键挑战。

#### 1.2 典型场景

```rust
// 原始事件结构体
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct UserCreatedEvent {
    pub id: String,
    pub email: String,
    pub name: String,
}

// 新版本事件结构体
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct UserCreatedEventV2 {
    pub id: String,
    pub email: String,
    pub name: String,
    pub phone: Option<String>, // 新增字段
    pub created_at: DateTime<Utc>, // 新增字段
}
```

#### 1.3 解决方案

```rust
// 事件版本管理策略
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(tag = "version")]
pub enum UserEvent {
    #[serde(rename = "1.0")]
    V1(UserCreatedEventV1),
    #[serde(rename = "2.0")]
    V2(UserCreatedEventV2),
}

// 事件升级器
pub trait EventUpgrader {
    fn upgrade_event(&self, event: &Event) -> Result<Event, EventUpgradeError>;
}

pub struct UserEventUpgrader;

impl EventUpgrader for UserEventUpgrader {
    fn upgrade_event(&self, event: &Event) -> Result<Event, EventUpgradeError> {
        match event.event_type.as_str() {
            "UserCreated" => {
                let v1_data: UserCreatedEventV1 = serde_json::from_value(event.data.clone())?;
                let v2_data = UserCreatedEventV2 {
                    id: v1_data.id,
                    email: v1_data.email,
                    name: v1_data.name,
                    phone: None, // 默认值
                    created_at: event.timestamp, // 使用事件时间戳
                };
                
                let mut upgraded_event = event.clone();
                upgraded_event.data = serde_json::to_value(v2_data)?;
                upgraded_event.metadata.schema_version = "2.0".to_string();
                
                Ok(upgraded_event)
            }
            _ => Ok(event.clone()),
        }
    }
}
```

### 2. 事件重放性能问题

#### 2.1 问题描述

当聚合根有大量历史事件时，从头重放所有事件会导致性能问题。

#### 2.2 典型场景

```rust
// 性能问题示例
pub async fn load_aggregate_slow(aggregate_id: &str) -> Result<User, Error> {
    let events = event_store.get_events(aggregate_id, 0).await?; // 可能返回数万条事件
    User::load_from_events(events) // 重放所有事件，性能差
}
```

#### 2.3 解决方案

```rust
// 快照策略
pub struct SnapshotStrategy {
    pub snapshot_interval: u64,
    pub max_events_without_snapshot: u64,
}

impl SnapshotStrategy {
    pub fn should_create_snapshot(&self, current_version: u64, last_snapshot_version: u64) -> bool {
        current_version - last_snapshot_version >= self.snapshot_interval
    }
}

// 优化的聚合根加载
pub async fn load_aggregate_optimized(aggregate_id: &str) -> Result<User, Error> {
    // 1. 尝试加载最新快照
    if let Some(snapshot) = snapshot_store.get_latest_snapshot(aggregate_id).await? {
        // 2. 从快照版本开始重放事件
        let events = event_store
            .get_events(aggregate_id, snapshot.version + 1)
            .await?;
        
        let mut user = snapshot.aggregate;
        for event in events {
            user.apply_event(&event)?;
        }
        
        Ok(user)
    } else {
        // 3. 没有快照，从头开始重放
        let events = event_store.get_events(aggregate_id, 0).await?;
        User::load_from_events(events)
    }
}
```

### 3. 事件存储容量问题

#### 3.1 问题描述

随着时间推移，事件存储会不断增长，导致存储成本高和查询性能下降。

#### 3.2 典型场景

```rust
// 存储增长问题
pub struct EventStoreMetrics {
    pub total_events: u64,
    pub storage_size_gb: f64,
    pub oldest_event_date: DateTime<Utc>,
    pub newest_event_date: DateTime<Utc>,
}
```

#### 3.3 解决方案

```rust
// 事件归档策略
pub struct EventArchiveStrategy {
    pub archive_after_days: u64,
    pub archive_batch_size: usize,
    pub compression_enabled: bool,
}

impl EventArchiveStrategy {
    pub async fn archive_old_events(&self) -> Result<(), ArchiveError> {
        let cutoff_date = Utc::now() - Duration::days(self.archive_after_days as i64);
        
        let old_events = self.event_store
            .get_events_before_date(cutoff_date)
            .await?;
        
        for batch in old_events.chunks(self.archive_batch_size) {
            // 压缩并归档到冷存储
            let compressed_data = if self.compression_enabled {
                self.compress_events(batch)?
            } else {
                serde_json::to_vec(&batch)?
            };
            
            self.archive_store.store_compressed_events(compressed_data).await?;
            self.event_store.delete_events_batch(batch).await?;
        }
        
        Ok(())
    }
    
    fn compress_events(&self, events: &[Event]) -> Result<Vec<u8>, ArchiveError> {
        let json_data = serde_json::to_vec(events)?;
        let mut compressed = Vec::new();
        let mut encoder = GzEncoder::new(&mut compressed, Compression::default());
        encoder.write_all(&json_data)?;
        encoder.finish()?;
        Ok(compressed)
    }
}
```

### 4. CQRS一致性延迟问题

#### 4.1 问题描述

在CQRS架构中，命令模型和查询模型之间存在一致性延迟，可能导致用户看到过时数据。

#### 4.2 典型场景

```rust
// 一致性延迟问题
pub async fn create_user_and_query() -> Result<(), Error> {
    // 1. 创建用户命令
    let command = CreateUserCommand {
        email: "user@example.com".to_string(),
        name: "John Doe".to_string(),
    };
    command_processor.process_command(command).await?;
    
    // 2. 立即查询用户（可能查询到过时数据）
    let user = query_model.get_user_by_email("user@example.com").await?;
    // user 可能为 None，因为查询模型还未更新
}
```

#### 4.3 解决方案

```rust
// 最终一致性保证
pub struct ConsistencyManager {
    pub event_processor: Arc<EventProcessor>,
    pub query_model: Arc<dyn QueryModel>,
}

impl ConsistencyManager {
    pub async fn wait_for_consistency(
        &self,
        aggregate_id: &str,
        expected_version: u64,
        timeout: Duration,
    ) -> Result<(), ConsistencyError> {
        let start = Instant::now();
        
        while start.elapsed() < timeout {
            // 检查查询模型是否已更新到期望版本
            if let Some(current_version) = self.query_model.get_aggregate_version(aggregate_id).await? {
                if current_version >= expected_version {
                    return Ok(());
                }
            }
            
            tokio::time::sleep(Duration::from_millis(10)).await;
        }
        
        Err(ConsistencyError::Timeout)
    }
    
    pub async fn create_user_with_consistency(
        &self,
        command: CreateUserCommand,
    ) -> Result<UserView, Error> {
        // 1. 处理命令
        let events = self.command_processor.process_command(command).await?;
        let expected_version = events.last().unwrap().version;
        
        // 2. 等待查询模型一致性
        self.wait_for_consistency(
            &events[0].aggregate_id,
            expected_version,
            Duration::from_secs(5),
        ).await?;
        
        // 3. 返回最新数据
        self.query_model.get_user(&events[0].aggregate_id).await?
    }
}
```

## 常见误区

### 1. 过度设计事件结构体

#### 1.1 误区描述

为了追求完美的事件设计，将过多信息放入事件中，导致事件结构体复杂且难以维护。

#### 1.2 错误示例

```rust
// 错误示例：过度设计的事件
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct UserCreatedEvent {
    pub id: String,
    pub email: String,
    pub name: String,
    pub phone: Option<String>,
    pub address: Option<Address>,
    pub preferences: UserPreferences,
    pub metadata: EventMetadata,
    pub audit_info: AuditInfo,
    pub business_rules: BusinessRules,
    pub validation_results: ValidationResults,
    // ... 更多字段
}
```

#### 1.3 正确做法

```rust
// 正确示例：简洁的事件设计
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct UserCreatedEvent {
    pub id: String,
    pub email: String,
    pub name: String,
}

// 将额外信息放在事件元数据中
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct EventMetadata {
    pub user_id: Option<String>,
    pub session_id: Option<String>,
    pub ip_address: Option<String>,
    pub user_agent: Option<String>,
    pub business_context: Option<serde_json::Value>,
}
```

### 2. 忽略事件幂等性

#### 2.1 误区描述

认为事件处理系统会自动处理重复事件，忽略幂等性设计的重要性。

#### 2.2 错误示例

```rust
// 错误示例：非幂等的事件处理
impl EventHandler for UserCreatedHandler {
    async fn handle(&self, event: &Event, query_model: &dyn QueryModel) -> Result<(), Error> {
        let data: UserCreatedData = serde_json::from_value(event.data.clone())?;
        
        // 直接插入，可能导致重复数据
        sqlx::query!(
            "INSERT INTO users (id, email, name) VALUES ($1, $2, $3)",
            data.id,
            data.email,
            data.name,
        )
        .execute(query_model.get_pool())
        .await?;
        
        Ok(())
    }
}
```

#### 2.3 正确做法

```rust
// 正确示例：幂等的事件处理
impl EventHandler for UserCreatedHandler {
    async fn handle(&self, event: &Event, query_model: &dyn QueryModel) -> Result<(), Error> {
        let data: UserCreatedData = serde_json::from_value(event.data.clone())?;
        
        // 使用 UPSERT 确保幂等性
        sqlx::query!(
            "INSERT INTO users (id, email, name, created_at) 
             VALUES ($1, $2, $3, $4)
             ON CONFLICT (id) DO NOTHING",
            data.id,
            data.email,
            data.name,
            event.timestamp,
        )
        .execute(query_model.get_pool())
        .await?;
        
        Ok(())
    }
}
```

### 3. 过早优化

#### 3.1 误区描述

在系统初期就过度优化性能，导致架构复杂且难以维护。

#### 3.2 错误示例

```rust
// 错误示例：过早的复杂优化
pub struct OverOptimizedEventStore {
    pub primary_store: Box<dyn EventStore>,
    pub cache: Arc<Mutex<LruCache<String, Vec<Event>>>>,
    pub read_replicas: Vec<Box<dyn EventStore>>,
    pub sharding_strategy: Box<dyn ShardingStrategy>,
    pub compression_strategy: Box<dyn CompressionStrategy>,
    pub encryption_strategy: Box<dyn EncryptionStrategy>,
    pub backup_strategy: Box<dyn BackupStrategy>,
    // ... 更多优化组件
}
```

#### 3.3 正确做法

```rust
// 正确示例：渐进式优化
pub struct SimpleEventStore {
    pub store: Box<dyn EventStore>,
}

impl SimpleEventStore {
    pub fn new(store: Box<dyn EventStore>) -> Self {
        Self { store }
    }
    
    // 先实现基本功能，后续根据需求添加优化
    pub async fn append_events(
        &self,
        aggregate_id: &str,
        expected_version: u64,
        events: Vec<Event>,
    ) -> Result<(), EventStoreError> {
        self.store.append_events(aggregate_id, expected_version, events).await
    }
}

// 后续根据性能需求逐步添加优化
impl SimpleEventStore {
    pub fn with_caching(self, cache: Arc<Mutex<LruCache<String, Vec<Event>>>>) -> CachedEventStore {
        CachedEventStore {
            store: self.store,
            cache,
        }
    }
}
```

### 4. 忽略监控和可观测性

#### 4.1 误区描述

认为事件溯源系统不需要详细的监控，导致问题难以排查和性能瓶颈难以发现。

#### 4.2 错误示例

```rust
// 错误示例：没有监控的事件处理
pub async fn process_event_without_monitoring(event: &Event) -> Result<(), Error> {
    // 直接处理事件，没有监控
    event_handler.handle(event).await?;
    Ok(())
}
```

#### 4.3 正确做法

```rust
// 正确示例：完善的监控
pub struct MonitoredEventProcessor {
    pub event_handler: Box<dyn EventHandler>,
    pub metrics: Arc<EventMetrics>,
    pub logger: Arc<Logger>,
}

impl MonitoredEventProcessor {
    pub async fn process_event(&self, event: &Event) -> Result<(), Error> {
        let start = Instant::now();
        
        // 记录事件处理开始
        self.logger.info("Processing event", {
            "event_id": &event.id,
            "event_type": &event.event_type,
            "aggregate_id": &event.aggregate_id,
        });
        
        // 处理事件
        let result = self.event_handler.handle(event).await;
        
        // 记录处理结果
        let duration = start.elapsed();
        self.metrics.record_event_processing(
            &event.event_type,
            duration,
            result.is_ok(),
        );
        
        match result {
            Ok(()) => {
                self.logger.info("Event processed successfully", {
                    "event_id": &event.id,
                    "duration_ms": duration.as_millis(),
                });
                Ok(())
            }
            Err(e) => {
                self.logger.error("Event processing failed", {
                    "event_id": &event.id,
                    "error": &e.to_string(),
                    "duration_ms": duration.as_millis(),
                });
                Err(e)
            }
        }
    }
}

pub struct EventMetrics {
    pub event_processing_duration: Histogram,
    pub event_processing_errors: Counter,
    pub events_processed: Counter,
}

impl EventMetrics {
    pub fn record_event_processing(
        &self,
        event_type: &str,
        duration: Duration,
        success: bool,
    ) {
        self.event_processing_duration
            .with_label_values(&[event_type])
            .observe(duration.as_secs_f64());
        
        self.events_processed
            .with_label_values(&[event_type])
            .inc();
        
        if !success {
            self.event_processing_errors
                .with_label_values(&[event_type])
                .inc();
        }
    }
}
```

## 性能优化建议

### 1. 事件存储优化

```rust
// 批量写入优化
pub struct BatchEventStore {
    pub store: Box<dyn EventStore>,
    pub batch_size: usize,
    pub batch_timeout: Duration,
    pub pending_events: Arc<Mutex<Vec<Event>>>,
}

impl BatchEventStore {
    pub async fn append_events_batch(&self, events: Vec<Event>) -> Result<(), Error> {
        let mut pending = self.pending_events.lock().unwrap();
        pending.extend(events);
        
        if pending.len() >= self.batch_size {
            let batch = pending.drain(..).collect::<Vec<_>>();
            drop(pending);
            
            self.store.append_events_batch(batch).await?;
        }
        
        Ok(())
    }
}
```

### 2. 查询模型优化

```rust
// 查询模型缓存
pub struct CachedQueryModel {
    pub query_model: Box<dyn QueryModel>,
    pub cache: Arc<Mutex<LruCache<String, UserView>>>,
    pub cache_ttl: Duration,
}

impl CachedQueryModel {
    pub async fn get_user(&self, id: &str) -> Result<Option<UserView>, Error> {
        let cache_key = format!("user:{}", id);
        
        // 检查缓存
        if let Some(user) = self.cache.lock().unwrap().get(&cache_key) {
            return Ok(Some(user.clone()));
        }
        
        // 从数据库查询
        let user = self.query_model.get_user(id).await?;
        
        // 更新缓存
        if let Some(ref user) = user {
            self.cache.lock().unwrap().put(cache_key, user.clone());
        }
        
        Ok(user)
    }
}
```

### 3. 并发控制优化

```rust
// 聚合根锁优化
pub struct OptimizedAggregateLock {
    pub locks: Arc<RwLock<HashMap<String, Arc<Mutex<()>>>>>,
    pub lock_timeout: Duration,
}

impl OptimizedAggregateLock {
    pub async fn with_aggregate_lock<F, R>(
        &self,
        aggregate_id: &str,
        f: F,
    ) -> Result<R, Error>
    where
        F: FnOnce() -> Result<R, Error>,
    {
        let lock = self.get_aggregate_lock(aggregate_id).await;
        
        match tokio::time::timeout(self.lock_timeout, lock.lock()).await {
            Ok(_guard) => f(),
            Err(_) => Err(Error::LockTimeout),
        }
    }
}
```


