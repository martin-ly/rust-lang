# 事件总线与发布订阅模式 - 详细原理与实现

## 核心原理

### 事件驱动架构基础

事件驱动架构基于以下核心原则：

- **松耦合**: 组件间通过事件通信，不直接依赖
- **异步处理**: 事件处理通常是异步的
- **可扩展性**: 可以轻松添加新的发布者和订阅者
- **容错性**: 单个组件故障不影响整个系统

### 发布订阅模式机制

发布订阅模式包含三个核心角色：

1. **发布者(Publisher)**: 产生事件
2. **事件总线(Event Bus)**: 路由和分发事件
3. **订阅者(Subscriber)**: 消费事件

## Rust实现方案

### 基于Tokio的实现

#### 事件总线核心结构体

```rust
use tokio::sync::{broadcast, mpsc};
use std::collections::HashMap;
use std::sync::Arc;
use tokio::sync::RwLock;

pub struct EventBus {
    // 广播通道用于一对多通信
    broadcast_tx: broadcast::Sender<Event>,
    // 订阅者注册表
    subscribers: Arc<RwLock<HashMap<String, Vec<Box<dyn EventHandler>>>>>,
    // 错误处理通道
    error_tx: mpsc::Sender<EventError>,
}

#[derive(Clone, Debug)]
pub struct Event {
    pub id: String,
    pub topic: String,
    pub payload: Vec<u8>,
    pub timestamp: DateTime<Utc>,
    pub metadata: HashMap<String, String>,
}
```

#### 事件总线实现

```rust
impl EventBus {
    pub fn new() -> Self {
        let (broadcast_tx, _) = broadcast::channel(1000);
        let (error_tx, _) = mpsc::channel(100);
        
        Self {
            broadcast_tx,
            subscribers: Arc::new(RwLock::new(HashMap::new())),
            error_tx,
        }
    }
    
    pub async fn publish(&self, event: Event) -> Result<(), EventError> {
        // 序列化事件
        let serialized = bincode::serialize(&event)
            .map_err(|e| EventError::SerializationError(e.to_string()))?;
        
        // 发送到广播通道
        self.broadcast_tx.send(serialized)
            .map_err(|e| EventError::PublishError(e.to_string()))?;
        
        Ok(())
    }
    
    pub async fn subscribe<T: EventHandler + 'static>(
        &self,
        topic: String,
        handler: T,
    ) -> Result<(), EventError> {
        let mut subscribers = self.subscribers.write().await;
        subscribers
            .entry(topic)
            .or_insert_with(Vec::new)
            .push(Box::new(handler));
        
        Ok(())
    }
}
```

### 类型安全的事件处理

#### 事件特征定义

```rust
use serde::{Serialize, Deserialize};

pub trait Event: Serialize + Deserialize + Clone + Send + Sync {
    fn topic(&self) -> &str;
    fn id(&self) -> &str;
    fn timestamp(&self) -> DateTime<Utc>;
}

pub trait EventHandler: Send + Sync {
    async fn handle(&self, event: &Event) -> Result<(), EventError>;
    fn topic(&self) -> &str;
    fn priority(&self) -> u8 { 0 }
}
```

#### 具体事件实现

```rust
#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct UserCreatedEvent {
    pub user_id: String,
    pub email: String,
    pub username: String,
    pub created_at: DateTime<Utc>,
}

impl Event for UserCreatedEvent {
    fn topic(&self) -> &str { "user.created" }
    fn id(&self) -> &str { &self.user_id }
    fn timestamp(&self) -> DateTime<Utc> { self.created_at }
}

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct OrderPlacedEvent {
    pub order_id: String,
    pub user_id: String,
    pub items: Vec<OrderItem>,
    pub total_amount: Decimal,
    pub placed_at: DateTime<Utc>,
}

impl Event for OrderPlacedEvent {
    fn topic(&self) -> &str { "order.placed" }
    fn id(&self) -> &str { &self.order_id }
    fn timestamp(&self) -> DateTime<Utc> { self.placed_at }
}
```

### 订阅者实现

#### 基础订阅者

```rust
pub struct EmailNotificationHandler {
    email_service: Arc<EmailService>,
}

impl EventHandler for EmailNotificationHandler {
    async fn handle(&self, event: &Event) -> Result<(), EventError> {
        match event.topic() {
            "user.created" => {
                let user_event: UserCreatedEvent = bincode::deserialize(&event.payload)
                    .map_err(|e| EventError::DeserializationError(e.to_string()))?;
                
                self.email_service.send_welcome_email(&user_event.email).await?;
            }
            "order.placed" => {
                let order_event: OrderPlacedEvent = bincode::deserialize(&event.payload)
                    .map_err(|e| EventError::DeserializationError(e.to_string()))?;
                
                self.email_service.send_order_confirmation(&order_event).await?;
            }
            _ => {}
        }
        
        Ok(())
    }
    
    fn topic(&self) -> &str { "notifications" }
}
```

#### 数据库订阅者

```rust
pub struct DatabaseEventHandler {
    db_pool: Arc<Pool<Postgres>>,
}

impl EventHandler for DatabaseEventHandler {
    async fn handle(&self, event: &Event) -> Result<(), EventError> {
        match event.topic() {
            "user.created" => {
                let user_event: UserCreatedEvent = bincode::deserialize(&event.payload)
                    .map_err(|e| EventError::DeserializationError(e.to_string()))?;
                
                sqlx::query!(
                    "INSERT INTO users (id, email, username, created_at) VALUES ($1, $2, $3, $4)",
                    user_event.user_id,
                    user_event.email,
                    user_event.username,
                    user_event.created_at
                )
                .execute(&*self.db_pool)
                .await?;
            }
            _ => {}
        }
        
        Ok(())
    }
    
    fn topic(&self) -> &str { "database" }
}
```

### 高级特征实现

#### 事件过滤和路由

```rust
pub struct EventRouter {
    rules: Vec<RoutingRule>,
}

pub struct RoutingRule {
    pub source_topic: String,
    pub target_topic: String,
    pub condition: Box<dyn Fn(&Event) -> bool + Send + Sync>,
    pub transformation: Option<Box<dyn Fn(Event) -> Event + Send + Sync>>,
}

impl EventRouter {
    pub async fn route(&self, event: Event) -> Vec<Event> {
        let mut routed_events = Vec::new();
        
        for rule in &self.rules {
            if rule.source_topic == event.topic() && (rule.condition)(&event) {
                let mut transformed_event = event.clone();
                
                if let Some(transform) = &rule.transformation {
                    transformed_event = transform(transformed_event);
                }
                
                transformed_event.topic = rule.target_topic.clone();
                routed_events.push(transformed_event);
            }
        }
        
        routed_events
    }
}
```

#### 事件持久化

```rust
pub struct EventStore {
    db_pool: Arc<Pool<Postgres>>,
}

impl EventStore {
    pub async fn store_event(&self, event: &Event) -> Result<(), EventError> {
        sqlx::query!(
            "INSERT INTO events (id, topic, payload, timestamp, metadata) VALUES ($1, $2, $3, $4, $5)",
            event.id,
            event.topic,
            event.payload,
            event.timestamp,
            serde_json::to_value(&event.metadata)?
        )
        .execute(&*self.db_pool)
        .await?;
        
        Ok(())
    }
    
    pub async fn replay_events(
        &self,
        topic: &str,
        since: DateTime<Utc>,
    ) -> Result<Vec<Event>, EventError> {
        let events = sqlx::query!(
            "SELECT * FROM events WHERE topic = $1 AND timestamp >= $2 ORDER BY timestamp",
            topic,
            since
        )
        .fetch_all(&*self.db_pool)
        .await?;
        
        events
            .into_iter()
            .map(|row| {
                let metadata: HashMap<String, String> = serde_json::from_value(row.metadata)?;
                Ok(Event {
                    id: row.id,
                    topic: row.topic,
                    payload: row.payload,
                    timestamp: row.timestamp,
                    metadata,
                })
            })
            .collect()
    }
}
```

#### 错误处理和重试机制

```rust
pub struct RetryHandler {
    max_retries: u32,
    backoff_strategy: BackoffStrategy,
}

pub enum BackoffStrategy {
    Exponential { base_delay: Duration, max_delay: Duration },
    Linear { delay: Duration },
    Fixed { delay: Duration },
}

impl RetryHandler {
    pub async fn handle_with_retry<T, F, Fut>(
        &self,
        operation: F,
    ) -> Result<T, EventError>
    where
        F: Fn() -> Fut + Send + Sync,
        Fut: Future<Output = Result<T, EventError>> + Send,
    {
        let mut attempts = 0;
        let mut delay = self.get_initial_delay();
        
        loop {
            match operation().await {
                Ok(result) => return Ok(result),
                Err(e) => {
                    attempts += 1;
                    if attempts >= self.max_retries {
                        return Err(e);
                    }
                    
                    tokio::time::sleep(delay).await;
                    delay = self.get_next_delay(delay);
                }
            }
        }
    }
    
    fn get_initial_delay(&self) -> Duration {
        match &self.backoff_strategy {
            BackoffStrategy::Exponential { base_delay, .. } => *base_delay,
            BackoffStrategy::Linear { delay } => *delay,
            BackoffStrategy::Fixed { delay } => *delay,
        }
    }
    
    fn get_next_delay(&self, current_delay: Duration) -> Duration {
        match &self.backoff_strategy {
            BackoffStrategy::Exponential { base_delay, max_delay } => {
                let next_delay = current_delay * 2;
                if next_delay > *max_delay {
                    *max_delay
                } else {
                    next_delay
                }
            }
            BackoffStrategy::Linear { delay } => *delay,
            BackoffStrategy::Fixed { delay } => *delay,
        }
    }
}
```

## 性能优化

### 异步处理优化

```rust
pub struct AsyncEventProcessor {
    worker_pool: ThreadPool,
    event_queue: mpsc::Receiver<Event>,
}

impl AsyncEventProcessor {
    pub async fn process_events(&mut self) {
        while let Some(event) = self.event_queue.recv().await {
            let handlers = self.get_handlers_for_topic(&event.topic).await;
            
            for handler in handlers {
                let event_clone = event.clone();
                self.worker_pool.spawn_ok(async move {
                    if let Err(e) = handler.handle(&event_clone).await {
                        log::error!("Event handling failed: {}", e);
                    }
                });
            }
        }
    }
}
```

### 批量处理

```rust
pub struct BatchEventProcessor {
    batch_size: usize,
    batch_timeout: Duration,
    events: Vec<Event>,
    last_flush: Instant,
}

impl BatchEventProcessor {
    pub async fn add_event(&mut self, event: Event) -> Result<(), EventError> {
        self.events.push(event);
        
        if self.events.len() >= self.batch_size || 
           self.last_flush.elapsed() >= self.batch_timeout {
            self.flush_batch().await?;
        }
        
        Ok(())
    }
    
    async fn flush_batch(&mut self) -> Result<(), EventError> {
        if self.events.is_empty() {
            return Ok(());
        }
        
        let events = std::mem::take(&mut self.events);
        self.process_batch(events).await?;
        self.last_flush = Instant::now();
        
        Ok(())
    }
}
```

## 监控和可观测性

### 事件指标收集

```rust
pub struct EventMetrics {
    published_events: AtomicU64,
    processed_events: AtomicU64,
    failed_events: AtomicU64,
    processing_times: Arc<RwLock<Vec<Duration>>>,
}

impl EventMetrics {
    pub fn record_published(&self) {
        self.published_events.fetch_add(1, Ordering::Relaxed);
    }
    
    pub fn record_processed(&self, processing_time: Duration) {
        self.processed_events.fetch_add(1, Ordering::Relaxed);
        self.processing_times.write().unwrap().push(processing_time);
    }
    
    pub fn record_failed(&self) {
        self.failed_events.fetch_add(1, Ordering::Relaxed);
    }
    
    pub fn get_stats(&self) -> EventStats {
        let processing_times = self.processing_times.read().unwrap();
        let avg_processing_time = if processing_times.is_empty() {
            Duration::ZERO
        } else {
            processing_times.iter().sum::<Duration>() / processing_times.len() as u32
        };
        
        EventStats {
            published: self.published_events.load(Ordering::Relaxed),
            processed: self.processed_events.load(Ordering::Relaxed),
            failed: self.failed_events.load(Ordering::Relaxed),
            avg_processing_time,
        }
    }
}
```

这个实现提供了完整的事件总线功能，包括类型安全的事件处理、错误重试、批量处理、监控等高级特征。通过合理使用Rust的异步特征和类型系统，可以构建高性能、可靠的事件驱动系统。


