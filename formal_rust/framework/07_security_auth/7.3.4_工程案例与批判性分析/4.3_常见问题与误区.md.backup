# 4.3 常见问题与误区

## 认证相关问题

### Q1: JWT Token安全问题

**问题描述**:

```rust
// 常见错误：JWT密钥硬编码
const JWT_SECRET: &str = "my-secret-key"; // 错误做法

// 正确做法：从环境变量读取
let jwt_secret = std::env::var("JWT_SECRET")
    .expect("JWT_SECRET must be set");
```

**解决方案**:

```rust
use jsonwebtoken::{encode, decode, Header, Validation, EncodingKey, DecodingKey};
use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct Claims {
    pub sub: String,
    pub exp: usize,
    pub iat: usize,
}

pub struct JwtService {
    encoding_key: EncodingKey,
    decoding_key: DecodingKey,
}

impl JwtService {
    pub fn new(secret: &str) -> Result<Self, Box<dyn std::error::Error>> {
        Ok(Self {
            encoding_key: EncodingKey::from_secret(secret.as_ref()),
            decoding_key: DecodingKey::from_secret(secret.as_ref()),
        })
    }

    pub fn create_token(&self, user_id: &str) -> Result<String, Box<dyn std::error::Error>> {
        let now = chrono::Utc::now();
        let exp = (now + chrono::Duration::hours(24)).timestamp() as usize;
        
        let claims = Claims {
            sub: user_id.to_string(),
            exp,
            iat: now.timestamp() as usize,
        };

        Ok(encode(&Header::default(), &claims, &self.encoding_key)?)
    }

    pub fn verify_token(&self, token: &str) -> Result<Claims, Box<dyn std::error::Error>> {
        let token_data = decode::<Claims>(token, &self.decoding_key, &Validation::default())?;
        Ok(token_data.claims)
    }
}
```

### Q2: 密码存储安全问题

**常见误区**:

```rust
// 错误：明文存储密码
pub struct User {
    pub id: Uuid,
    pub username: String,
    pub password: String, // 错误：明文存储
}

// 错误：使用弱哈希算法
use std::collections::hash_map::DefaultHasher;
use std::hash::{Hash, Hasher};

fn hash_password(password: &str) -> String {
    let mut hasher = DefaultHasher::new();
    password.hash(&mut hasher);
    format!("{:x}", hasher.finish()) // 不安全
}
```

**正确实现**:

```rust
use argon2::{self, Config};
use rand::Rng;

pub struct PasswordService;

impl PasswordService {
    pub fn hash_password(password: &str) -> Result<String, Box<dyn std::error::Error>> {
        let salt: [u8; 32] = rand::thread_rng().gen();
        let config = Config::default();
        
        let hash = argon2::hash_encoded(
            password.as_bytes(),
            &salt,
            &config,
        )?;
        
        Ok(hash)
    }

    pub fn verify_password(password: &str, hash: &str) -> Result<bool, Box<dyn std::error::Error>> {
        Ok(argon2::verify_encoded(hash, password.as_bytes())?)
    }
}

// 使用示例
#[derive(Debug, Clone)]
pub struct User {
    pub id: Uuid,
    pub username: String,
    pub password_hash: String, // 正确：存储哈希值
    pub salt: String,
}
```

### Q3: 会话管理问题

**问题描述**:

```rust
// 错误：无限期会话
pub struct Session {
    pub user_id: Uuid,
    pub token: String,
    // 缺少过期时间
}

// 正确实现
use chrono::{DateTime, Utc};

#[derive(Debug, Clone)]
pub struct Session {
    pub id: Uuid,
    pub user_id: Uuid,
    pub token: String,
    pub created_at: DateTime<Utc>,
    pub expires_at: DateTime<Utc>,
    pub is_active: bool,
}

impl Session {
    pub fn new(user_id: Uuid, token: String, duration_hours: i64) -> Self {
        let now = Utc::now();
        Self {
            id: Uuid::new_v4(),
            user_id,
            token,
            created_at: now,
            expires_at: now + chrono::Duration::hours(duration_hours),
            is_active: true,
        }
    }

    pub fn is_expired(&self) -> bool {
        Utc::now() > self.expires_at || !self.is_active
    }
}
```

## 授权相关问题

### Q4: 权限检查性能问题

**常见问题**:

```rust
// 错误：每次请求都查询数据库
pub async fn check_permission(
    user_id: Uuid,
    resource: &str,
    action: &str,
    db: &PgPool,
) -> Result<bool, Box<dyn std::error::Error>> {
    // 每次都查询数据库，性能差
    let result = sqlx::query!(
        "SELECT COUNT(*) FROM user_permissions WHERE user_id = $1 AND resource = $2 AND action = $3",
        user_id,
        resource,
        action
    )
    .fetch_one(db)
    .await?;
    
    Ok(result.count.unwrap_or(0) > 0)
}
```

**优化方案**:

```rust
use std::collections::HashMap;
use tokio::sync::RwLock;
use std::sync::Arc;

#[derive(Debug, Clone)]
pub struct PermissionCache {
    cache: Arc<RwLock<HashMap<String, Vec<String>>>>,
    ttl: Duration,
}

impl PermissionCache {
    pub fn new(ttl: Duration) -> Self {
        Self {
            cache: Arc::new(RwLock::new(HashMap::new())),
            ttl,
        }
    }

    pub async fn check_permission(
        &self,
        user_id: Uuid,
        resource: &str,
        action: &str,
        db: &PgPool,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let cache_key = format!("{}:{}", user_id, resource);
        
        // 先从缓存检查
        {
            let cache = self.cache.read().await;
            if let Some(permissions) = cache.get(&cache_key) {
                return Ok(permissions.contains(&action.to_string()));
            }
        }

        // 缓存未命中，查询数据库
        let permissions = sqlx::query!(
            "SELECT action FROM user_permissions WHERE user_id = $1 AND resource = $2",
            user_id,
            resource
        )
        .fetch_all(db)
        .await?;

        let actions: Vec<String> = permissions
            .into_iter()
            .map(|p| p.action)
            .collect();

        // 更新缓存
        {
            let mut cache = self.cache.write().await;
            cache.insert(cache_key, actions.clone());
        }

        Ok(actions.contains(&action.to_string()))
    }
}
```

### Q5: 角色继承复杂性

**问题描述**:

```rust
// 错误：硬编码角色权限
pub enum Role {
    Admin,
    User,
    Guest,
}

impl Role {
    pub fn permissions(&self) -> Vec<Permission> {
        match self {
            Role::Admin => vec![
                Permission::new("*", "*"), // 过于宽泛
            ],
            Role::User => vec![
                Permission::new("user", "read"),
                Permission::new("user", "write"),
            ],
            Role::Guest => vec![
                Permission::new("public", "read"),
            ],
        }
    }
}
```

**改进方案**:

```rust
#[derive(Debug, Clone)]
pub struct Role {
    pub name: String,
    pub permissions: Vec<Permission>,
    pub inherits_from: Option<Vec<String>>,
    pub metadata: HashMap<String, String>,
}

impl Role {
    pub fn get_all_permissions(&self, role_repo: &RoleRepository) -> Result<Vec<Permission>, Box<dyn std::error::Error>> {
        let mut all_permissions = self.permissions.clone();
        
        if let Some(parent_roles) = &self.inherits_from {
            for parent_role_name in parent_roles {
                if let Some(parent_role) = role_repo.get_role(parent_role_name)? {
                    let parent_permissions = parent_role.get_all_permissions(role_repo)?;
                    all_permissions.extend(parent_permissions);
                }
            }
        }
        
        Ok(all_permissions)
    }
}
```

## 安全通信问题

### Q6: TLS配置不当

**常见错误**:

```rust
// 错误：使用不安全的TLS配置
use rustls::{ClientConfig, ServerConfig};

let config = ServerConfig::builder()
    .with_safe_defaults()
    .with_no_client_auth()
    .build()?; // 缺少现代密码套件配置
```

**正确配置**:

```rust
use rustls::{ServerConfig, ServerCertVerifier};
use rustls_pemfile::{certs, pkcs8_private_keys};
use std::fs::File;
use std::io::BufReader;

pub fn create_tls_config(cert_path: &str, key_path: &str) -> Result<ServerConfig, Box<dyn std::error::Error>> {
    let cert_file = File::open(cert_path)?;
    let key_file = File::open(key_path)?;
    
    let cert_chain: Vec<Certificate> = certs(&mut BufReader::new(cert_file))?
        .into_iter()
        .map(|cert| Certificate(cert))
        .collect();
    
    let mut keys: Vec<PrivateKey> = pkcs8_private_keys(&mut BufReader::new(key_file))?
        .into_iter()
        .map(|key| PrivateKey(key))
        .collect();
    
    let config = ServerConfig::builder()
        .with_safe_default_cipher_suites()
        .with_safe_default_kx_groups()
        .with_protocol_versions(&[&rustls::version::TLS13])?
        .with_no_client_auth()
        .with_single_cert(cert_chain, keys.remove(0))?;
    
    Ok(config)
}
```

### Q7: API密钥管理问题

**常见问题**:

```rust
// 错误：API密钥硬编码
const API_KEY: &str = "sk-1234567890abcdef"; // 错误

// 错误：密钥存储不当
pub struct ApiKey {
    pub key: String, // 明文存储
    pub user_id: Uuid,
}
```

**正确实现**:

```rust
use sha2::{Sha256, Digest};
use base64::{Engine as _, engine::general_purpose};

#[derive(Debug, Clone)]
pub struct ApiKey {
    pub id: Uuid,
    pub user_id: Uuid,
    pub key_hash: String, // 存储哈希值
    pub name: String,
    pub created_at: DateTime<Utc>,
    pub last_used: Option<DateTime<Utc>>,
    pub is_active: bool,
}

impl ApiKey {
    pub fn new(user_id: Uuid, name: String) -> (Self, String) {
        let raw_key = Self::generate_key();
        let key_hash = Self::hash_key(&raw_key);
        
        let api_key = Self {
            id: Uuid::new_v4(),
            user_id,
            key_hash,
            name,
            created_at: Utc::now(),
            last_used: None,
            is_active: true,
        };
        
        (api_key, raw_key)
    }
    
    fn generate_key() -> String {
        let mut rng = rand::thread_rng();
        let bytes: [u8; 32] = rng.gen();
        general_purpose::STANDARD.encode(bytes)
    }
    
    fn hash_key(key: &str) -> String {
        let mut hasher = Sha256::new();
        hasher.update(key.as_bytes());
        general_purpose::STANDARD.encode(hasher.finalize())
    }
    
    pub fn verify_key(&self, key: &str) -> bool {
        let hash = Self::hash_key(key);
        hash == self.key_hash
    }
}
```

## 审计日志问题

### Q8: 审计日志性能影响

**问题描述**:

```rust
// 错误：同步写入审计日志
pub async fn audit_log(
    user_id: Uuid,
    action: &str,
    resource: &str,
    db: &PgPool,
) -> Result<(), Box<dyn std::error::Error>> {
    // 同步写入，影响性能
    sqlx::query!(
        "INSERT INTO audit_logs (user_id, action, resource, timestamp) VALUES ($1, $2, $3, $4)",
        user_id,
        action,
        resource,
        Utc::now()
    )
    .execute(db)
    .await?;
    
    Ok(())
}
```

**优化方案**:

```rust
use tokio::sync::mpsc;
use std::sync::Arc;

#[derive(Debug, Clone)]
pub struct AuditEvent {
    pub event_id: Uuid,
    pub timestamp: DateTime<Utc>,
    pub user_id: Option<Uuid>,
    pub action: String,
    pub resource: String,
    pub ip_address: IpAddr,
    pub user_agent: String,
    pub success: bool,
    pub details: Value,
}

pub struct AuditLogger {
    sender: mpsc::Sender<AuditEvent>,
    db_pool: Arc<PgPool>,
}

impl AuditLogger {
    pub fn new(db_pool: Arc<PgPool>) -> Self {
        let (sender, mut receiver) = mpsc::channel(1000);
        let db_pool_clone = db_pool.clone();
        
        // 异步处理审计日志
        tokio::spawn(async move {
            let mut batch = Vec::new();
            
            while let Some(event) = receiver.recv().await {
                batch.push(event);
                
                if batch.len() >= 100 {
                    Self::flush_batch(&batch, &db_pool_clone).await;
                    batch.clear();
                }
            }
            
            // 处理剩余事件
            if !batch.is_empty() {
                Self::flush_batch(&batch, &db_pool_clone).await;
            }
        });
        
        Self { sender, db_pool }
    }
    
    pub async fn log_event(&self, event: AuditEvent) -> Result<(), Box<dyn std::error::Error>> {
        self.sender.send(event).await?;
        Ok(())
    }
    
    async fn flush_batch(events: &[AuditEvent], db: &PgPool) {
        // 批量插入审计日志
        let mut transaction = db.begin().await.unwrap();
        
        for event in events {
            sqlx::query!(
                "INSERT INTO audit_logs (event_id, timestamp, user_id, action, resource, ip_address, user_agent, success, details) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)",
                event.event_id,
                event.timestamp,
                event.user_id,
                event.action,
                event.resource,
                event.ip_address.to_string(),
                event.user_agent,
                event.success,
                serde_json::to_value(&event.details).unwrap()
            )
            .execute(&mut *transaction)
            .await
            .unwrap();
        }
        
        transaction.commit().await.unwrap();
    }
}
```

## 最佳实践总结

### 1. 安全配置管理

```rust
#[derive(Debug, Clone)]
pub struct SecurityConfig {
    pub jwt_secret: String,
    pub jwt_expiration_hours: u64,
    pub password_min_length: usize,
    pub max_login_attempts: u32,
    pub session_timeout_minutes: u64,
    pub mfa_required: bool,
    pub rate_limit_requests_per_minute: u32,
}

impl SecurityConfig {
    pub fn from_env() -> Result<Self, Box<dyn std::error::Error>> {
        Ok(Self {
            jwt_secret: std::env::var("JWT_SECRET")?,
            jwt_expiration_hours: std::env::var("JWT_EXPIRATION_HOURS")?.parse()?,
            password_min_length: std::env::var("PASSWORD_MIN_LENGTH")?.parse()?,
            max_login_attempts: std::env::var("MAX_LOGIN_ATTEMPTS")?.parse()?,
            session_timeout_minutes: std::env::var("SESSION_TIMEOUT_MINUTES")?.parse()?,
            mfa_required: std::env::var("MFA_REQUIRED")?.parse()?,
            rate_limit_requests_per_minute: std::env::var("RATE_LIMIT_REQUESTS_PER_MINUTE")?.parse()?,
        })
    }
}
```

### 2. 错误处理

```rust
#[derive(Debug, thiserror::Error)]
pub enum AuthError {
    #[error("Invalid credentials")]
    InvalidCredentials,
    #[error("Account locked")]
    AccountLocked,
    #[error("Token expired")]
    TokenExpired,
    #[error("Insufficient permissions")]
    InsufficientPermissions,
    #[error("Rate limit exceeded")]
    RateLimitExceeded,
    #[error("MFA required")]
    MfaRequired,
    #[error("Database error: {0}")]
    DatabaseError(#[from] sqlx::Error),
}

pub type AuthResult<T> = Result<T, AuthError>;
```

### 3. 监控和告警

```rust
#[derive(Debug, Clone)]
pub struct SecurityMetrics {
    pub failed_login_attempts: u64,
    pub successful_logins: u64,
    pub account_lockouts: u64,
    pub suspicious_activities: u64,
    pub api_key_usage: u64,
}

impl SecurityMetrics {
    pub fn record_failed_login(&mut self, user_id: Uuid, ip: IpAddr) {
        self.failed_login_attempts += 1;
        
        // 检查是否需要告警
        if self.failed_login_attempts > 100 {
            self.trigger_security_alert("High number of failed login attempts");
        }
    }
    
    fn trigger_security_alert(&self, message: &str) {
        // 发送告警通知
        tracing::warn!("Security alert: {}", message);
    }
}
```

"

---

<!-- 以下为按标准模板自动补全的占位章节，待后续填充 -->
"
## 概述
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 技术背景
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 核心概念
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 技术实现
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 形式化分析
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 应用案例
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 性能分析
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n
## 未来值展望
(待补充，参考 STANDARD_DOCUMENT_TEMPLATE_2025.md)\n


