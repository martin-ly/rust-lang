/*
    表达式是计算值的代码片段。
    
    在 Rust 中，几乎所有的代码都是表达式，包括条件语句和循环。
    
    表达式可以被视为态射，它们将输入（如变量、常量）映射到输出（计算结果）。
*/



#[allow(unused)]
// 表达式定义
pub fn test_expression() -> () {
    ()
}


/*
项（Item）与表达式（Expression）：
组合关系：
    项是程序的基本构建块，而表达式是这些项的具体实现。
    每个项可以包含多个表达式，表达式在项的上下文中执行。
形式：
    例如，一个函数项可以包含多个表达式作为其主体：
*/
#[allow(unused)]
pub fn test_expression_2() -> () {
    let x = 5; // 语句
    let y = 10; // 语句
    let z = x + y; // 表达式
    println!("z is {}", z); // 表达式
}

