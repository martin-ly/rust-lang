[workspace]

resolver = "3"

members = [ "crates/c01_ownership_borrow_scope", 
            "crates/c02_type_system", 
            "crates/c03_control_fn",
            "crates/c04_generic", 
            "crates/c05_threads", 
            "crates/c06_async", 
            "crates/c07_process", 
            "crates/c08_algorithms", 
            "crates/c09_design_pattern", 
            "crates/c10_networks",  
            "crates/c11_frameworks", 
            "crates/c12_middlewares", 
            "crates/c13_microservice", 
            "crates/c14_workflow", 
            "crates/c15_blockchain", 
            "crates/c16_webassembly", 
            "crates/c17_iot", 
            "crates/c18_model",
            "crates/c19_ai",
            "crates/c20_distributed",
            ]

[workspace.package]
edition = "2024"
rust-version = "1.90"

[profile.release]

#opt-level = "s" 和 opt-level = "z" 专门针对减小二进制体积设计
#"s"：在保持较好性能的同时尽可能减小体积
#"z"：最大程度地优化体积，可能牺牲少量性能
opt-level = 3

#链接时优化（Link Time Optimization, LTO）允许编译器跨 crate 边界进行整体优化，消除冗余代码和数据。
#lto = "fat" 这种配置下，编译器会在链接阶段对所有代码进行全局优化，通常能减少 20-30% 的体积。
#对于对体积有极端要求的场景，可以使用 "thin" 替代 "fat"，在优化效果和编译时间之间取得平衡。
lto = true

# codegen-units = 1 表示单个代码生成单元，即每个 crate 都独立编译。
# 这种配置下，每个 crate 的编译速度会更快，但可能会牺牲一些整体优化效果。
# 如果希望获得更好的优化效果，可以将 codegen-units 设置为更大的值（如 256）。
codegen-units = 1

#去除调试符号是减小二进制体积最有效的方法之一。
#strip = true
strip = "symbols"

# 默认情况下，Rust 在 panic 时会进行栈展开，提供详细的调用栈信息。
# 但在生产环境中，特别是对于命令行工具和小型服务，立即终止程序可能是更合适的选择：
# 这种配置不仅减小了二进制体积（因为它不需要包含栈展开的代码），还能略微提升性能。
panic = "abort"

# LTO 通过全局代码分析消除了未被使用的函数和数据；
# 调整优化级别使编译器优先选择空间效率更高的指令序列；
# 去除调试符号直接移除了大量的辅助信息；
# 改变 panic 策略避免了栈展开代码的引入；
# Musl 工具链则提供了一个更精简的标准库实现。
# 从编译流程角度看，这些优化发生在不同的阶段：
#  LTO 在链接阶段工作，优化级别影响编译中期决策，而去除符号和 panic 策略则影响前期的代码生成策略。
#  这种多阶段的优化组合确保了最终生成的二进制文件既小巧又高效。

[profile.dev]
opt-level = 0
debug = true
debug-assertions = true
overflow-checks = true

[profile.test]
opt-level = 1
debug = true

[profile.bench]
opt-level = 3
debug = false
lto = true
codegen-units = 1

# 工作区级别的依赖版本统一 - 2025年最新稳定版本
[workspace.dependencies]
# 网络和 HTTP 相关 - 2025年最新稳定版本
reqwest = { version = "0.12.23", features = ["json", "rustls-tls"] }
hyper = { version = "1.7.0", features = ["full"] }
hyper-util = "0.1.17"
hyper-rustls = "0.27.7"
hyper-tls = "0.6.0"
hyper-timeout = "0.5.2"
h2 = "0.4.12"
http = "1.3.1"

# Web 框架 - 最新稳定版本
axum = { version = "0.8.4", features = ["macros", "multipart", "tracing"] }
axum-core = "0.5.2"
tower = "0.5.2"
tower-http = { version = "0.6.6", features = ["cors", "trace", "timeout", "compression-gzip"] }
actix-web = "4"
actix = "0.13"
actix-rt = "2"

# 终端UI库
crossterm = "0.29"

# 其他异步生态常用依赖（统一版本）
async-trait = "0.1"
async-stream = "0.3"
async-std = "1"
tokio-console = "0.1"
tokio-test = "0.4"
mio = "1"
tungstenite = "0.27"
rcgen = "0.14"

# 基础依赖统一
dotenvy = "0.15"
tempfile = "3"

# gRPC 相关 - 与 opentelemetry-otlp-0.30.0 兼容的版本
tonic = { version = "0.14.2", features = ["transport", "tls-ring", "tls-webpki-roots", "channel"] }
tonic-build = "0.14.2"
prost = "0.14.1"
prost-build = "0.14.1"
prost-derive = "0.14.1"
prost-types = "0.14.1"

# TLS 和加密 - 最新稳定版本
rustls = { version = "0.23.31", features = ["ring"] }
rustls-webpki = "0.103.6"
rustls-pemfile = "2.2.0"
tokio-rustls = "0.26.2"
ring = "0.17.14"
webpki-roots = "1.0.2"

# 错误处理 - 最新稳定版本
thiserror = "2.0.16"
anyhow = "1.0.99"

# 序列化 - 2025年最新稳定版本
serde = { version = "1.0.224", features = ["derive"] }
serde_json = "1.0.145"
serde_yaml = "0.9.34"
bincode = "1.3.3"

# 异步运行时 - 最新稳定版本
tokio = { version = "1.47.1", features = ["full"] }
tokio-util = "0.7.16"
tokio-stream = "0.1.17"
tokio-tungstenite = "0.27.0"
futures = "0.3.31"
futures-util = "0.3.31"

# 日志和追踪 - 最新稳定版本
tracing = "0.1.41"
tracing-subscriber = { version = "0.3.20", features = ["env-filter", "json"] }
log = "0.4.28"
prometheus = "0.14"
tracing-opentelemetry = "0.30"
opentelemetry = "0.30.0"
opentelemetry_sdk = { version = "0.30.0", features = ["rt-tokio"] }
opentelemetry-otlp = { version = "0.30.0", features = ["http-json"] }
opentelemetry-stdout = "0.30.0"
opentelemetry-proto = { version = "0.30.0", features = ["gen-tonic"] }

# 指标 - 统一版本
metrics = "0.24"
metrics-exporter-prometheus = "0.17"

# 时间处理 - 最新稳定版本
chrono = { version = "0.4.42", features = ["serde"] }
time = { version = "0.3.43", features = ["serde", "macros"] }

# 其他常用库 - 2025年最新稳定版本
uuid = { version = "1.18.1", features = ["v4", "serde"] }
url = "2.5.7"
bytes = "1.10.1"
indexmap = "2.11.3"
once_cell = "1.20.2"
num_cpus = "1.16.0"
libc = "0.2.161"
rand = "0.9.0"
sha2 = "0.10.8"
hex = "0.4.3"

# 数据库和存储 - 2025年最新稳定版本
sea-orm = { version = "1.1.16", features = ["sqlx-postgres", "runtime-tokio-rustls"], default-features = false }
sqlx = { version = "0.8.6", features = ["runtime-tokio-rustls", "postgres", "mysql", "sqlite", "chrono", "uuid"], default-features = false }
redis = "0.32.5"
rusqlite = { version = "0.37.0", default-features = false }

# 性能测试和基准测试
criterion = "0.7"

# 配置管理
config = "0.15.16"
toml = "0.9.6"

# 并发和同步
crossbeam = "0.8.4"
rayon = "1.11.0"
dashmap = "6.1.0"
parking_lot = "0.12.4"

# 测试相关
mockall = "0.13.1"
proptest = "1.7"

# AI 和机器学习 - 2025年最新稳定版本
candle-core = "0.9.1"
candle-nn = "0.9.1"
candle-transformers = "0.9.1"
tch = "0.20.0"
petgraph = "0.8.2"

# Web 和 GUI 框架 - 2025年最新稳定版本
tauri = "2.8.5"
egui = "0.32.3"
iced = "0.13.1"

# 依赖版本约束 - 在工作区依赖中统一版本 end