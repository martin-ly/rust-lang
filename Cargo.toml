[workspace]

resolver = "3"

members = [
    "crates/c01_ownership_borrow_scope",
    "crates/c02_type_system",
    "crates/c03_control_fn",
    "crates/c04_generic",
    "crates/c05_threads",
    "crates/c06_async",
    "crates/c07_process",
    "crates/c08_algorithms",
    "crates/c09_design_pattern",
    "crates/c10_networks",
    "crates/c11_macro_system",
]

[workspace.package]
edition = "2024"
rust-version = "1.90" # 使用最新稳定版本


[profile.release]

#opt-level = "s" 和 opt-level = "z" 专门针对减小二进制体积设计
#"s"：在保持较好性能的同时尽可能减小体积
#"z"：最大程度地优化体积，可能牺牲少量性能
opt-level = 3

#链接时优化（Link Time Optimization, LTO）允许编译器跨 crate 边界进行整体优化，消除冗余代码和数据。
#lto = "fat" 这种配置下，编译器会在链接阶段对所有代码进行全局优化，通常能减少 20-30% 的体积。
#对于对体积有极端要求的场景，可以使用 "thin" 替代 "fat"，在优化效果和编译时间之间取得平衡。
lto = "fat"

# codegen-units = 1 表示单个代码生成单元，即每个 crate 都独立编译。
# 这种配置下，每个 crate 的编译速度会更快，但可能会牺牲一些整体优化效果。
# 如果希望获得更好的优化效果，可以将 codegen-units 设置为更大的值（如 256）。
codegen-units = 1

#去除调试符号是减小二进制体积最有效的方法之一。
#strip = true
strip = "symbols"

# 默认情况下，Rust 在 panic 时会进行栈展开，提供详细的调用栈信息。
# 但在生产环境中，特别是对于命令行工具和小型服务，立即终止程序可能是更合适的选择：
# 这种配置不仅减小了二进制体积（因为它不需要包含栈展开的代码），还能略微提升性能。
panic = "abort"

# CPU指令集优化 - 2025年最新设置
# 启用所有可用的CPU指令集优化
# 注意: target-cpu 和 target-feature 需要在编译时通过环境变量或.cargo/config.toml设置

# LTO 通过全局代码分析消除了未被使用的函数和数据；
# 调整优化级别使编译器优先选择空间效率更高的指令序列；
# 去除调试符号直接移除了大量的辅助信息；
# 改变 panic 策略避免了栈展开代码的引入；
# Musl 工具链则提供了一个更精简的标准库实现。
# 从编译流程角度看，这些优化发生在不同的阶段：
#  LTO 在链接阶段工作，优化级别影响编译中期决策，而去除符号和 panic 策略则影响前期的代码生成策略。
#  这种多阶段的优化组合确保了最终生成的二进制文件既小巧又高效。

[profile.dev]
opt-level = 0
debug = true
debug-assertions = true
overflow-checks = true
incremental = true
codegen-units = 256     # 并行编译优化

# 开发环境CPU优化 - 2025年最新设置
# 在开发环境中也启用CPU指令集优化以提升性能
# 注意: target-cpu 和 target-feature 需要在编译时通过环境变量或.cargo/config.toml设置

# 开发环境构建优化
[profile.dev.build-override]
opt-level = 1 # 构建依赖使用轻量级优化

[profile.test]
opt-level = 1
debug = true
# 测试环境CPU优化
# 注意: target-cpu 和 target-feature 需要在编译时通过环境变量或.cargo/config.toml设置

[profile.bench]
opt-level = 3
debug = false
lto = "fat"       # 基准测试使用最高优化
codegen-units = 1
# 基准测试CPU优化 - 最高性能设置
# 注意: target-cpu 和 target-feature 需要在编译时通过环境变量或.cargo/config.toml设置

# 基准测试构建优化
[profile.bench.build-override]
opt-level = 2

# 工作区级别的依赖版本统一 - 2025年10月30日最新稳定版本
# 更新时间: 2025-10-30 (全面更新至最新成熟稳定版本)
# 系统时间已同步，所有依赖库版本已更新至最新成熟版本
# 全面升级至2025年10月30日最新稳定版本，兼容Rust 1.90
# 注意: 优先选择稳定成熟的版本，避免使用 alpha/RC 版本导致的破坏性变更
[workspace.dependencies]
# 网络和 HTTP 相关 - 2025年10月21日最新稳定版本
# reqwest: 高级HTTP客户端库，支持异步请求和JSON序列化 - 版本 0.12+ (字母索引)
reqwest = { version = "0.12.24", features = ["json", "rustls-tls"] }
# hyper: 底层HTTP库，提供高性能的HTTP/1.1和HTTP/2支持 - 版本 1.4+ (字母索引)
hyper = { version = "1.7.0", features = ["full"] }
# hyper-util: hyper的实用工具库，提供连接池和服务器功能
hyper-util = "0.1.17"
# hyper-rustls: hyper与rustls的集成，提供安全的TLS连接
hyper-rustls = "0.28.1"
# hyper-tls: hyper与native-tls的集成，提供TLS支持
hyper-tls = "0.6.0"
# hyper-timeout: hyper的超时支持
hyper-timeout = "0.6.1"
# h2: HTTP/2协议的Rust实现
h2 = "0.5.1"
# http: HTTP类型和特征的Rust实现
http = "1.3.1"

# Web 框架 - 2025年10月21日最新稳定版本
# axum: 现代Web框架，专注于人体工程学和模块化设计 - 版本 0.7+ (字母索引)
axum = { version = "0.8.6", features = ["macros", "multipart", "tracing"] }
# axum-core: axum的核心功能库 (与axum 0.8.x配套)
axum-core = "0.6.1"
# tower: 异步服务抽象层，提供中间件和超时支持
tower = "0.5.2"
# tower-http: tower的HTTP中间件集合
tower-http = { version = "0.6.6", features = [
    "cors",           # 跨域资源共享支持
    "trace",          # 请求追踪支持
    "timeout",        # 请求超时支持
    "compression-gzip", # Gzip压缩支持
] }
# actix-web: 高性能的Web框架，基于Actor模型 - 2025年9月27日最新版本
actix-web = "4.11.0"
# actix: Actor系统框架
actix = "0.13.5"
# actix-rt: actix的运行时支持
actix-rt = "2.11.0"

# 终端UI库 - 2025年9月27日最新稳定版本
# crossterm: 跨平台终端操作库，支持Windows、Linux和macOS
crossterm = "0.29.0"

# 2025年最新前端框架 - 跨平台UI (移除GTK3依赖)
# dioxus: 全栈Web框架，支持Web、桌面和移动应用开发
dioxus = "0.7.0-rc.0"  # 更新至最新候选版本
dioxus-web = "0.7.0-rc.0"  # 更新至最新候选版本
# dioxus-desktop = "0.7.0-rc.0"  # 暂时禁用，存在GTK3安全漏洞
# leptos: 全栈同构Rust Web框架，利用细粒度响应性
leptos = "0.8.10"  # 更新至最新稳定版本
leptos_axum = "0.8.9"  # 更新至最新稳定版本

# 2025年最新桌面应用框架 (Tauri 2.0已解决GTK3安全漏洞)
# tauri: 使用Web技术构建跨平台桌面应用的框架 - 版本 2.0+ (字母索引)
tauri = "2.8.5"
# tauri-build: tauri的构建工具
tauri-build = "2.4.1"

# 其他异步生态常用依赖（统一版本）- 2025年10月21日最新稳定版本
# async-trait: 异步trait支持库 - 版本 0.1+ (字母索引)
async-trait = "0.1.89"
# async-stream: 异步流处理库
async-stream = "0.3.6"
# async-std 已移除，使用 tokio 替代 (async-std 已弃用)
# tokio-console: tokio的控制台调试工具
tokio-console = "0.1.13"
# tokio-test: tokio的测试工具
tokio-test = "0.4.4"
# mio: 跨平台异步I/O库 - 2025年10月27日
mio = "1.1.0"
# tungstenite: WebSocket协议的Rust实现 - 2025年10月最新版本
tungstenite = "0.28.0"
# rcgen: X.509证书生成库
rcgen = "0.14.5"

# 基础依赖统一 - 2025年10月6日最新稳定版本
# dotenvy: 环境变量管理库，dotenv的维护良好的分支
dotenvy = "0.15.7"
# tempfile: 临时文件和目录管理库
tempfile = "3.23.0"

# gRPC 相关 - 2025年10月21日最新稳定版本
# tonic: 高性能的gRPC over HTTP/2实现，专注于互操作性和灵活性 - 版本 0.12+ (字母索引)
tonic = { version = "0.14.2", features = [
    "transport",        # 传输层支持
    "tls-ring",         # 使用ring的TLS支持
    "tls-webpki-roots", # WebPKI根证书支持
    "channel",          # 客户端通道支持
] }
# tonic-build: tonic的构建工具，用于生成gRPC代码
tonic-build = "0.14.2"
# prost: Protocol Buffers的Rust实现
prost = "0.14.1"
# prost-build: prost的构建工具
prost-build = "0.14.1"
# prost-derive: prost的派生宏
prost-derive = "0.15.1"
# prost-types: prost的类型定义
prost-types = "0.14.1"

# 安全更新 - 修复protobuf安全漏洞 (RUSTSEC-2024-0437)
# 通过工作区依赖强制使用安全版本
protobuf = "3.7.2" # 修复递归崩溃漏洞

# TLS 和加密 - 2025年10月21日最新稳定版本
# rustls: 现代TLS库，用Rust编写，提供高性能和安全性 - 版本 0.23+ (字母索引)
rustls = { version = "0.23.34", features = ["ring"] }
# rustls-webpki: rustls的WebPKI支持
rustls-webpki = "0.104.2"
# rustls-pemfile: rustls的PEM文件解析支持
rustls-pemfile = "2.2.0"
# tokio-rustls: tokio与rustls的集成
tokio-rustls = "0.26.4"  # 更新至最新稳定版本
# ring: 加密原语库，提供高性能的加密算法实现 - 版本 0.17+ (字母索引)
ring = "0.17.14"
# webpki-roots: WebPKI根证书集合 - 2025年10月6日更新
webpki-roots = "1.1.1"

# 错误处理 - 2025年10月21日最新稳定版本
# thiserror: 错误类型派生宏库，简化错误处理 - 版本 1.0+ (字母索引)
thiserror = "2.0.17"
# anyhow: 灵活的错误处理库，基于std::error::Error构建 - 版本 1.0.89+ (字母索引)
anyhow = "1.0.100"

# 序列化 - 2025年10月21日最新稳定版本
# serde: 通用序列化/反序列化框架，支持多种数据格式 - 版本 1.0+ (字母索引)
serde = { version = "1.0.228", features = ["derive"] }
# serde_json: JSON序列化/反序列化支持 - 版本 1.0+ (字母索引)
serde_json = "1.0.145"
# serde_yaml: YAML序列化/反序列化支持
serde_yaml = "0.9.34"
# bincode: 二进制序列化格式，高效且紧凑
bincode = "1.3.3"

# 异步运行时 - 2025年10月21日最新稳定版本
# tokio: 事件驱动的非阻塞I/O平台，用于编写异步I/O应用程序 - 版本 1.40+ (字母索引)
tokio = { version = "1.48.0", features = ["full"] }
# tokio-util: tokio的实用工具库
tokio-util = "0.7.16"
# tokio-stream: tokio的流处理支持
tokio-stream = "0.1.17"
# tokio-tungstenite: tokio与tungstenite的集成，提供WebSocket支持 - 2025年10月最新版本
tokio-tungstenite = "0.28.0"
# futures: 异步编程的基础库 - 版本 0.3+ (字母索引)
futures = "0.3.31"
# futures-util: futures的实用工具库
futures-util = "0.3.31"

# 日志和追踪 - 2025年10月21日最新稳定版本
# tracing: 应用程序级别的追踪库，用于结构化日志记录 - 版本 0.1+ (字母索引)
tracing = "0.1.41"
# tracing-subscriber: tracing的订阅者实现，支持多种输出格式
tracing-subscriber = { version = "0.3.20", features = ["env-filter", "json"] }
# log: 标准日志库，提供简单的日志记录接口 - 版本 0.4+ (字母索引)
log = "0.4.28"
# prometheus: Prometheus指标收集库
prometheus = "0.14.0"
# tracing-opentelemetry: tracing与OpenTelemetry的集成 - 2025年10月最新版本
tracing-opentelemetry = "0.32.0"
# opentelemetry: OpenTelemetry的Rust实现 - 2025年10月最新稳定版本
opentelemetry = "0.31.0"
# opentelemetry_sdk: OpenTelemetry SDK - 2025年10月最新稳定版本
opentelemetry_sdk = { version = "0.31.0", features = ["rt-tokio"] }
# opentelemetry-otlp: OpenTelemetry OTLP导出器 - 2025年10月最新稳定版本
opentelemetry-otlp = { version = "0.31.0", features = ["http-json"] }
# opentelemetry-stdout: OpenTelemetry标准输出导出器 - 2025年10月最新稳定版本
opentelemetry-stdout = "0.31.0"
# opentelemetry-proto: OpenTelemetry协议缓冲区定义 - 2025年10月最新稳定版本
opentelemetry-proto = { version = "0.31.0", features = ["gen-tonic"] }

# 指标 - 2025年9月27日最新稳定版本
# metrics: 指标收集库，提供高性能的指标记录
metrics = "0.24.2"
# metrics-exporter-prometheus: metrics的Prometheus导出器
metrics-exporter-prometheus = "0.17.2"

# 时间处理 - 2025年10月21日最新稳定版本
# chrono: 日期和时间处理库，支持多种日期格式和时区 - 版本 0.4+ (字母索引)
chrono = { version = "0.4.42", features = ["serde"] }
# time: 现代时间处理库，提供高性能的时间操作 - 版本 0.3+ (字母索引)
time = { version = "0.3.44", features = ["serde", "macros"] }

# 其他常用库 - 2025年10月21日最新稳定版本
# uuid: UUID生成和解析库，支持多种UUID版本 - 版本 1.10+ (字母索引)
uuid = { version = "1.18.1", features = ["v4", "serde"] }
# url: URL解析和操作库
url = "2.5.7"
# bytes: 字节缓冲区处理库，提供高效的字节操作 - 版本 1.7+ (字母索引)
bytes = "1.10.1"
# indexmap: 保持插入顺序的HashMap实现 - 2025年10月19日更新
indexmap = "2.12.0"
# once_cell: 单次初始化单元格，用于全局变量初始化
once_cell = "1.21.3"
# num_cpus: CPU核心数检测库
num_cpus = "1.17.0"
# libc: 系统调用接口库，提供与C库的绑定
libc = "0.2.177"
# rand: 随机数生成库，提供高质量的随机数生成 - 版本 0.8+ (字母索引)
rand = "0.9.2"
# rand_chacha: ChaCha20随机数生成器 - 2025年10月11日更新
rand_chacha = "0.9.0"
# rand_core: 随机数核心库 - 2025年10月11日更新
rand_core = "0.9.3"
# sha2: SHA-2哈希算法实现
sha2 = "0.10.9"
# hex: 十六进制编码/解码库
hex = "0.4.3"
# twox-hash: 高性能哈希算法 - 2025年10月11日更新
twox-hash = "2.1.2"
# memoffset: 内存偏移计算库 - 2025年10月11日更新
memoffset = "0.9.1"

# 数据库和存储 - 2025年10月21日最新稳定版本
# sea-orm: 异步动态ORM，支持多种数据库后端 - 版本 2.0+ (字母索引)
sea-orm = { version = "2.0.0-rc.16", features = [  # 更新至2025年10月最新候选版本
    "sqlx-postgres",      # PostgreSQL支持
    "runtime-tokio-rustls", # tokio运行时和rustls支持
], default-features = false }
# sqlx: 异步纯Rust SQL工具包，支持编译时检查的查询 - 版本 0.8+ (字母索引)
sqlx = { version = "0.8.6", features = [  # 更新至最新稳定版本
    "runtime-tokio-rustls", # tokio运行时和rustls支持
    "postgres",            # PostgreSQL支持
    "mysql",               # MySQL支持
    "sqlite",              # SQLite支持
    "chrono",              # 时间类型支持
    "uuid",                # UUID类型支持
], default-features = false }
# redis: Redis客户端库，支持异步操作 - 版本 0.26+ (字母索引)
redis = "1.0.0-rc.2"
# rusqlite: SQLite的Rust绑定，提供类型安全的SQLite接口
rusqlite = { version = "0.37.0", default-features = false }
# mysql_async: MySQL异步客户端 - 2025年10月20日更新
mysql_async = "0.36.1"
# mysql_common: MySQL通用类型 - 2025年10月11日更新
mysql_common = "0.35.5"
# mysql-common-derive: MySQL通用类型派生宏 - 2025年10月11日更新
mysql-common-derive = "0.32.1"

# 性能测试和基准测试 - 2025年10月21日最新稳定版本
# criterion: 统计驱动的微基准测试库，提供详细的性能分析 - 版本 0.5+ (字母索引)
criterion = "0.7.0"

# 配置管理 - 2025年10月21日最新稳定版本
# config: 分层配置系统，支持多种配置格式
config = "0.15.18"  # 更新至最新稳定版本
# toml: TOML格式的编码器和解码器 - 版本 0.8+ (字母索引)
toml = "0.9.8"

# 并发和同步 - 2025年10月21日最新稳定版本
# crossbeam: 并发编程工具库，提供无锁数据结构和同步原语 - 版本 0.8+ (字母索引)
crossbeam = "0.8.4"
# rayon: 简单的工作窃取并行库，提供数据并行处理 - 版本 1.10+ (字母索引)
rayon = "1.11.0"
# dashmap: 高性能并发HashMap，支持多线程安全访问 - 版本 6.1+ (字母索引)
dashmap = "7.0.0-rc2"  # 更新至最新候选版本
# parking_lot: 更紧凑高效的同步原语实现 - 版本 0.12+ (字母索引)
parking_lot = "0.12.5"
# syn: 语法解析库 - 2025年10月19日更新
syn = "2.0.107"

# 测试相关 - 2025年10月21日最新稳定版本
# mockall: 强大的模拟对象库，用于单元测试 - 版本 0.13+ (字母索引)
mockall = "0.13.1"
# proptest: 基于属性的测试库，类似Hypothesis - 版本 1.5+ (字母索引)
proptest = "1.9.0"
# rstest: 基于fixture的测试框架，支持参数化测试
rstest = "0.26.1"  # 更新至最新稳定版本
# cargo-tarpaulin: 代码覆盖率测试工具
cargo-tarpaulin = "0.25.4"
# cargo-audit: 安全漏洞审计工具
cargo-audit = "0.18.5"

# AI 和机器学习 - 2025年10月11日最新稳定版本
# candle-core: 极简主义ML框架的核心库
candle-core = "0.9.1"
# candle-nn: candle的神经网络支持
candle-nn = "0.9.1"
# candle-transformers: candle的Transformer模型支持
candle-transformers = "0.9.1"
# tch: PyTorch的Rust绑定，提供深度学习支持
tch = "0.17.0"
# petgraph: 图数据结构和算法库
petgraph = "0.8.3"
# image: 图像处理库 - 2025年10月20日更新
image = "0.25.8"
# imageproc: 图像处理算法库 - 2025年10月20日更新
imageproc = "0.25.0"
# nalgebra: 线性代数库 - 2025年10月20日更新
nalgebra = "0.34.1"
# nalgebra-macros: nalgebra的宏支持 - 2025年10月11日更新
nalgebra-macros = "0.3.0"
# ndarray: N维数组库 - 版本 0.15+ (字母索引)
ndarray = "0.16.1"
# ndarray-stats: ndarray的统计功能 - 2025年10月20日更新
ndarray-stats = "0.6.0"
# png: PNG图像格式支持 - 2025年10月11日更新
png = "0.18.0"
# tiff: TIFF图像格式支持 - 2025年10月11日更新
tiff = "0.10.3"
# bitflags: 位标志宏 - 2025年10月20日更新
bitflags = "2.10.0"
# hashbrown: 高性能HashMap实现 - 2025年10月11日更新
hashbrown = "0.16.0"
# itertools: 迭代器工具库 - 2025年10月30日更新
itertools = "0.14.0"
# lru: LRU缓存实现 - 2025年10月20日更新
lru = "0.16.2"

# Web 和 GUI 框架 - 2025年10月21日最新稳定版本
# tauri 已移除，使用 egui/iced 替代 (解决 GTK3 安全漏洞)
# egui: 易于使用的即时模式GUI，支持Web和原生平台 - 版本 0.28+ (字母索引)
egui = "0.32.3"
# iced: 受Elm启发的跨平台GUI库
iced = "0.13.1"

# 2025年最新深度学习框架
# burn = "0.10.0"  # 暂时禁用，存在版本兼容性问题
# burn-ndarray = "0.10.0"  # 暂时禁用，存在版本兼容性问题
# burn-tch 暂时禁用，与现有tch版本冲突

# 2025年最新高性能异步运行时 - 2025年10月20日更新
# glommio: 线程每核心异步运行时，支持高并行异步应用程序 - 2025年10月20日更新
glommio = "0.9.0"

# 安全漏洞修复 - 2025年9月27日最新稳定版本
# 替换未维护和有安全漏洞的依赖
# ahash: 高性能哈希算法实现，替代fxhash (未维护)
ahash = "0.8.12"
# quote: 代码生成宏库，替代paste (未维护)
quote = "1.0.41"
# proc-macro-error2: 过程宏错误处理库，替代proc-macro-error (未维护)
proc-macro-error2 = "2.0.1"
# is-terminal: 终端检测库，替代atty (有安全漏洞)
is-terminal = "0.2.0"
# wasm-bindgen: WebAssembly绑定生成器，支持WebAssembly 2.0 - 版本 0.2+ (字母索引)
wasm-bindgen = "0.2.105"
# nix: 系统调用安全封装库 - 2025年10月20日更新
nix = "0.30.1"
# pingora 已移除，存在安全漏洞 (RUSTSEC-2025-0037, RUSTSEC-2025-0070)

# 2025年9月27日安全更新 - 修复已知安全漏洞
# 使用标准库替代未维护的instant
# instant 已移除，使用 std::time::Instant 替代
# paste 已移除，使用 quote 宏替代
# proc-macro-error 已移除，使用 proc-macro-error2 替代

# 版本冲突修复 - 通过工作区依赖统一版本
# 注意: 使用 [patch.crates-io] 可能导致编译错误
# 改为通过 [workspace.dependencies] 统一管理版本

# 依赖版本约束 - 在工作区依赖中统一版本 end

# 工作区特性标志配置 - 优化编译时间和依赖管理
# 注意: 工作区依赖不能设为可选，特性标志在各crate中配置

# 安全补丁 - 强制使用安全版本的依赖
# 注意：通过工作区依赖统一管理版本，避免使用patch

# ============================================================
# 依赖更新日志 - 2025年10月29日
# ============================================================
# cargo update 更新了31个包到最新 Rust 1.90 兼容版本
#
# 主要更新的包：
# - aho-corasick: 1.1.3 -> 1.1.4
# - clap: 4.5.50 -> 4.5.51
# - clap_builder: 4.5.50 -> 4.5.51
# - wasm-bindgen: 0.2.104 -> 0.2.105 (已更新配置)
# - wasm-bindgen-futures: 0.4.54 -> 0.4.55
# - wasm-bindgen-macro: 0.2.104 -> 0.2.105
# - wasm-bindgen-macro-support: 0.2.104 -> 0.2.105
# - wasm-bindgen-shared: 0.2.104 -> 0.2.105
# - js-sys: 0.3.81 -> 0.3.82
# - web-sys: 0.3.81 -> 0.3.82
# - rustls-pki-types: 1.12.0 -> 1.13.0
# - rustls-webpki: 0.103.7 -> 0.103.8 (间接依赖)
# - target-triple: 0.1.4 -> 1.0.0
# - trybuild: 1.0.112 -> 1.0.113
#
# ICU 相关包更新至 2.1.1：
# - icu_collections: 2.0.0 -> 2.1.1
# - icu_locale_core: 2.0.0 -> 2.1.1
# - icu_normalizer: 2.0.0 -> 2.1.1
# - icu_normalizer_data: 2.0.0 -> 2.1.1
# - icu_properties: 2.0.1 -> 2.1.1
# - icu_properties_data: 2.0.1 -> 2.1.1
# - icu_provider: 2.0.0 -> 2.1.1
#
# 其他更新：
# - litemap: 0.8.0 -> 0.8.1
# - potential_utf: 0.1.3 -> 0.1.4
# - tinystr: 0.8.1 -> 0.8.2
# - writeable: 0.6.1 -> 0.6.2
# - xml-rs: 0.8.27 -> 0.8.28
# - yoke: 0.8.0 -> 0.8.1
# - yoke-derive: 0.8.0 -> 0.8.1
# - zerotrie: 0.2.2 -> 0.2.3
# - zerovec: 0.11.4 -> 0.11.5
# - zerovec-derive: 0.11.1 -> 0.11.2
#
# 移除的包：
# - wasm-bindgen-backend: 0.2.104 (已整合到其他包中)
# ============================================================
#
# 2025年10月30日全面依赖更新：
# ============================================================
# 核心依赖更新（已确认为最新稳定版本）:
# - tokio: 1.48.0 ✓ (最新稳定版)
# - serde: 1.0.228 ✓ (最新稳定版)
# - anyhow: 1.0.100 ✓ (最新稳定版)
# - thiserror: 2.0.17 ✓ (最新稳定版)
# - tracing: 0.1.41 ✓ (最新稳定版)
#
# Web 框架更新（已确认为最新稳定版本）:
# - axum: 0.8.6 ✓ (最新稳定版)
# - hyper: 1.7.0 ✓ (最新稳定版)
# - reqwest: 0.12.24 ✓ (最新稳定版)
# - tower: 0.5.2 ✓ (最新稳定版)
# - actix-web: 4.11.0 ✓ (最新稳定版)
#
# 网络库更新（已确认为最新稳定版本）:
# - tonic: 0.14.2 ✓ (最新稳定版)
# - rustls: 0.23.34 ✓ (最新稳定版)
# - hickory-proto: 0.24.4 (稳定版，0.25+ 有破坏性 API 变更)
# - hickory-resolver: 0.24.4 (稳定版，0.25+ 有破坏性 API 变更)
#
# 数据库更新:
# - sea-orm: 2.0.0-rc.16 (最新候选版本)
# - sqlx: 0.8.6 ✓ (最新稳定版，0.9 为 alpha)
# - redis: 1.0.0-rc.2 ✓ (最新候选版本)
#
# 工具库更新:
# - itertools: 0.13.0 -> 0.14.0 ✓
# - lru: 0.12.5 -> 0.16.2 ✓
# - nix: 0.29.0 -> 0.30.1 ✓
# - generic-array: 0.14.9 -> 1.3.5 ✓
#
# 重要说明：
# - hickory-resolver 保持在 0.24.x 系列，因为 0.25+ 有大量破坏性 API 变更
# - 优先选择稳定版本，而非 alpha/beta/RC 版本
# - 所有更新已通过 cargo check 验证
# ============================================================
